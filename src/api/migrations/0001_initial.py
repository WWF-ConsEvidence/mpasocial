# Generated by Django 2.2 on 2021-10-11 20:46

import api.models.base
from django.conf import settings
import django.contrib.gis.db.models.fields
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='Country',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('updated_on', models.DateTimeField(auto_now=True)),
                ('iso', models.CharField(max_length=5)),
                ('name', models.CharField(max_length=255)),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='country_updated_by', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'countries',
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='FGD',
            fields=[
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('updated_on', models.DateTimeField(auto_now=True)),
                ('fgdid', models.IntegerField(primary_key=True, serialize=False)),
                ('fgdcode', models.PositiveSmallIntegerField(default=995)),
                ('fgdate', models.DateField(blank=True, null=True)),
                ('yearmonitoring', models.PositiveSmallIntegerField(choices=[(2000, 2000), (2001, 2001), (2002, 2002), (2003, 2003), (2004, 2004), (2005, 2005), (2006, 2006), (2007, 2007), (2008, 2008), (2009, 2009), (2010, 2010), (2011, 2011), (2012, 2012), (2013, 2013), (2014, 2014), (2015, 2015), (2016, 2016), (2017, 2017), (2018, 2018), (2019, 2019), (2020, 2020), (2021, 2021), (2022, 2022), (2023, 2023), (2024, 2024), (2025, 2025), (2026, 2026), (2027, 2027), (2028, 2028), (2029, 2029), (2030, 2030), (2031, 2031), (2032, 2032), (2033, 2033), (2034, 2034), (2035, 2035), (2036, 2036), (2037, 2037), (2038, 2038), (2039, 2039), (2040, 2040), (2041, 2041), (2042, 2042), (2043, 2043), (2044, 2044), (2045, 2045), (2046, 2046), (2047, 2047), (2048, 2048), (2049, 2049), (2050, 2050), (993, 'Pertanyaan tidak diminta (tidak ada skip logic) / Question not asked (no skip logic)'), (994, 'SKIP / Skipped based on survey skip logic'), (995, 'Tidak Ada data / No data'), (996, 'Lainnya / Other'), (997, 'Tidak tahu / Do not know'), (998, 'Tidak sesuai / Not applicable'), (999, 'Menolak / Refused')], default=995, validators=[api.models.base.MinValueBCValidator(2000), api.models.base.MaxValueBCValidator(2050)])),
                ('starttime', models.TimeField()),
                ('endtime', models.TimeField()),
                ('maleparticipants', models.PositiveSmallIntegerField(default=995, validators=[api.models.base.MaxValueBCValidator(100)])),
                ('femaleparticipants', models.PositiveSmallIntegerField(default=995, validators=[api.models.base.MaxValueBCValidator(100)])),
                ('fgroundname', models.CharField(default='995', max_length=255)),
                ('fgroundboat', models.CharField(default='995', max_length=255)),
                ('fgroundtime', models.DecimalField(decimal_places=3, default=995, max_digits=6, validators=[django.core.validators.MinValueValidator(0)])),
                ('fgrounddist', models.DecimalField(decimal_places=3, default=995, max_digits=6, validators=[django.core.validators.MinValueValidator(0)])),
                ('fgroundsize', models.DecimalField(decimal_places=6, default=995, max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('mpaname', models.CharField(default='995', max_length=255)),
                ('mpaboat', models.CharField(default='995', max_length=255)),
                ('mpatime', models.DecimalField(decimal_places=3, default=995, max_digits=6, validators=[django.core.validators.MinValueValidator(0)])),
                ('mpadist', models.DecimalField(decimal_places=3, default=995, max_digits=6, validators=[django.core.validators.MinValueValidator(0)])),
                ('mpasize', models.DecimalField(decimal_places=6, default=995, max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('ntname', models.CharField(default='995', max_length=255)),
                ('ntboat', models.CharField(default='995', max_length=255)),
                ('nttime', models.DecimalField(decimal_places=3, default=995, max_digits=6, validators=[django.core.validators.MinValueValidator(0)])),
                ('ntdist', models.DecimalField(decimal_places=3, default=995, max_digits=6, validators=[django.core.validators.MinValueValidator(0)])),
                ('ntsize', models.DecimalField(decimal_places=6, default=995, max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('mpahistl', models.TextField(default='995')),
                ('mpahist', models.TextField(default='995')),
                ('extbnd', models.PositiveSmallIntegerField(default=995, validators=[api.models.base.MinValueBCValidator(1), api.models.base.MaxValueBCValidator(100)])),
                ('intbnd', models.PositiveSmallIntegerField(default=995, validators=[api.models.base.MinValueBCValidator(1), api.models.base.MaxValueBCValidator(100)])),
                ('bndlandmarks', models.PositiveSmallIntegerField(choices=[(0, 'Tidak / No'), (1, 'Ya / Yes'), (993, 'Pertanyaan tidak diminta (tidak ada skip logic) / Question not asked (no skip logic)'), (994, 'SKIP / Skipped based on survey skip logic'), (995, 'Tidak Ada data / No data'), (996, 'Lainnya / Other'), (997, 'Tidak tahu / Do not know'), (998, 'Tidak sesuai / Not applicable'), (999, 'Menolak / Refused')], default=995)),
                ('bndmarkers', models.PositiveSmallIntegerField(choices=[(0, 'Tidak / No'), (1, 'Ya / Yes'), (993, 'Pertanyaan tidak diminta (tidak ada skip logic) / Question not asked (no skip logic)'), (994, 'SKIP / Skipped based on survey skip logic'), (995, 'Tidak Ada data / No data'), (996, 'Lainnya / Other'), (997, 'Tidak tahu / Do not know'), (998, 'Tidak sesuai / Not applicable'), (999, 'Menolak / Refused')], default=995)),
                ('bndsigns', models.PositiveSmallIntegerField(choices=[(0, 'Tidak / No'), (1, 'Ya / Yes'), (993, 'Pertanyaan tidak diminta (tidak ada skip logic) / Question not asked (no skip logic)'), (994, 'SKIP / Skipped based on survey skip logic'), (995, 'Tidak Ada data / No data'), (996, 'Lainnya / Other'), (997, 'Tidak tahu / Do not know'), (998, 'Tidak sesuai / Not applicable'), (999, 'Menolak / Refused')], default=995)),
                ('bndgovnotice', models.PositiveSmallIntegerField(choices=[(0, 'Tidak / No'), (1, 'Ya / Yes'), (993, 'Pertanyaan tidak diminta (tidak ada skip logic) / Question not asked (no skip logic)'), (994, 'SKIP / Skipped based on survey skip logic'), (995, 'Tidak Ada data / No data'), (996, 'Lainnya / Other'), (997, 'Tidak tahu / Do not know'), (998, 'Tidak sesuai / Not applicable'), (999, 'Menolak / Refused')], default=995)),
                ('bndwoutreach', models.PositiveSmallIntegerField(choices=[(0, 'Tidak / No'), (1, 'Ya / Yes'), (993, 'Pertanyaan tidak diminta (tidak ada skip logic) / Question not asked (no skip logic)'), (994, 'SKIP / Skipped based on survey skip logic'), (995, 'Tidak Ada data / No data'), (996, 'Lainnya / Other'), (997, 'Tidak tahu / Do not know'), (998, 'Tidak sesuai / Not applicable'), (999, 'Menolak / Refused')], default=995)),
                ('bndaoutreach', models.PositiveSmallIntegerField(choices=[(0, 'Tidak / No'), (1, 'Ya / Yes'), (993, 'Pertanyaan tidak diminta (tidak ada skip logic) / Question not asked (no skip logic)'), (994, 'SKIP / Skipped based on survey skip logic'), (995, 'Tidak Ada data / No data'), (996, 'Lainnya / Other'), (997, 'Tidak tahu / Do not know'), (998, 'Tidak sesuai / Not applicable'), (999, 'Menolak / Refused')], default=995)),
                ('bndvoutreach', models.PositiveSmallIntegerField(choices=[(0, 'Tidak / No'), (1, 'Ya / Yes'), (993, 'Pertanyaan tidak diminta (tidak ada skip logic) / Question not asked (no skip logic)'), (994, 'SKIP / Skipped based on survey skip logic'), (995, 'Tidak Ada data / No data'), (996, 'Lainnya / Other'), (997, 'Tidak tahu / Do not know'), (998, 'Tidak sesuai / Not applicable'), (999, 'Menolak / Refused')], default=995)),
                ('bndword', models.PositiveSmallIntegerField(choices=[(0, 'Tidak / No'), (1, 'Ya / Yes'), (993, 'Pertanyaan tidak diminta (tidak ada skip logic) / Question not asked (no skip logic)'), (994, 'SKIP / Skipped based on survey skip logic'), (995, 'Tidak Ada data / No data'), (996, 'Lainnya / Other'), (997, 'Tidak tahu / Do not know'), (998, 'Tidak sesuai / Not applicable'), (999, 'Menolak / Refused')], default=995)),
                ('bndotheroutreach', models.PositiveSmallIntegerField(choices=[(0, 'Tidak / No'), (1, 'Ya / Yes'), (993, 'Pertanyaan tidak diminta (tidak ada skip logic) / Question not asked (no skip logic)'), (994, 'SKIP / Skipped based on survey skip logic'), (995, 'Tidak Ada data / No data'), (996, 'Lainnya / Other'), (997, 'Tidak tahu / Do not know'), (998, 'Tidak sesuai / Not applicable'), (999, 'Menolak / Refused')], default=995)),
                ('bndother', models.PositiveSmallIntegerField(choices=[(0, 'Tidak / No'), (1, 'Ya / Yes'), (993, 'Pertanyaan tidak diminta (tidak ada skip logic) / Question not asked (no skip logic)'), (994, 'SKIP / Skipped based on survey skip logic'), (995, 'Tidak Ada data / No data'), (996, 'Lainnya / Other'), (997, 'Tidak tahu / Do not know'), (998, 'Tidak sesuai / Not applicable'), (999, 'Menolak / Refused')], default=995)),
                ('bndotherspecifyl', models.CharField(default='995', max_length=255)),
                ('bndotherspecify', models.CharField(default='995', max_length=255)),
                ('penaltyverbal', models.PositiveSmallIntegerField(default=995, validators=[api.models.base.MaxValueBCValidator(999)])),
                ('penaltywritten', models.PositiveSmallIntegerField(choices=[(0, 'Tidak / No'), (1, 'Ya / Yes'), (993, 'Pertanyaan tidak diminta (tidak ada skip logic) / Question not asked (no skip logic)'), (994, 'SKIP / Skipped based on survey skip logic'), (995, 'Tidak Ada data / No data'), (996, 'Lainnya / Other'), (997, 'Tidak tahu / Do not know'), (998, 'Tidak sesuai / Not applicable'), (999, 'Menolak / Refused')], default=995)),
                ('penaltyaccess', models.PositiveSmallIntegerField(choices=[(0, 'Tidak / No'), (1, 'Ya / Yes'), (993, 'Pertanyaan tidak diminta (tidak ada skip logic) / Question not asked (no skip logic)'), (994, 'SKIP / Skipped based on survey skip logic'), (995, 'Tidak Ada data / No data'), (996, 'Lainnya / Other'), (997, 'Tidak tahu / Do not know'), (998, 'Tidak sesuai / Not applicable'), (999, 'Menolak / Refused')], default=995)),
                ('penaltyequipment', models.PositiveSmallIntegerField(choices=[(0, 'Tidak / No'), (1, 'Ya / Yes'), (993, 'Pertanyaan tidak diminta (tidak ada skip logic) / Question not asked (no skip logic)'), (994, 'SKIP / Skipped based on survey skip logic'), (995, 'Tidak Ada data / No data'), (996, 'Lainnya / Other'), (997, 'Tidak tahu / Do not know'), (998, 'Tidak sesuai / Not applicable'), (999, 'Menolak / Refused')], default=995)),
                ('penaltyfines', models.PositiveSmallIntegerField(choices=[(0, 'Tidak / No'), (1, 'Ya / Yes'), (993, 'Pertanyaan tidak diminta (tidak ada skip logic) / Question not asked (no skip logic)'), (994, 'SKIP / Skipped based on survey skip logic'), (995, 'Tidak Ada data / No data'), (996, 'Lainnya / Other'), (997, 'Tidak tahu / Do not know'), (998, 'Tidak sesuai / Not applicable'), (999, 'Menolak / Refused')], default=995)),
                ('penaltyprison', models.PositiveSmallIntegerField(choices=[(0, 'Tidak / No'), (1, 'Ya / Yes'), (993, 'Pertanyaan tidak diminta (tidak ada skip logic) / Question not asked (no skip logic)'), (994, 'SKIP / Skipped based on survey skip logic'), (995, 'Tidak Ada data / No data'), (996, 'Lainnya / Other'), (997, 'Tidak tahu / Do not know'), (998, 'Tidak sesuai / Not applicable'), (999, 'Menolak / Refused')], default=995)),
                ('penaltyother', models.PositiveSmallIntegerField(choices=[(0, 'Tidak / No'), (1, 'Ya / Yes'), (993, 'Pertanyaan tidak diminta (tidak ada skip logic) / Question not asked (no skip logic)'), (994, 'SKIP / Skipped based on survey skip logic'), (995, 'Tidak Ada data / No data'), (996, 'Lainnya / Other'), (997, 'Tidak tahu / Do not know'), (998, 'Tidak sesuai / Not applicable'), (999, 'Menolak / Refused')], default=995)),
                ('penaltyotherspecifyl', models.CharField(default='995', max_length=255)),
                ('penaltyotherspecify', models.CharField(default='995', max_length=255)),
                ('npenalty', models.PositiveSmallIntegerField(default=995, validators=[api.models.base.MaxValueBCValidator(999)])),
                ('verbalsanction', models.PositiveSmallIntegerField(choices=[(0, 'Tidak / No'), (1, 'Ya / Yes'), (993, 'Pertanyaan tidak diminta (tidak ada skip logic) / Question not asked (no skip logic)'), (994, 'SKIP / Skipped based on survey skip logic'), (995, 'Tidak Ada data / No data'), (996, 'Lainnya / Other'), (997, 'Tidak tahu / Do not know'), (998, 'Tidak sesuai / Not applicable'), (999, 'Menolak / Refused')], default=995)),
                ('physicalsanction', models.PositiveSmallIntegerField(choices=[(0, 'Tidak / No'), (1, 'Ya / Yes'), (993, 'Pertanyaan tidak diminta (tidak ada skip logic) / Question not asked (no skip logic)'), (994, 'SKIP / Skipped based on survey skip logic'), (995, 'Tidak Ada data / No data'), (996, 'Lainnya / Other'), (997, 'Tidak tahu / Do not know'), (998, 'Tidak sesuai / Not applicable'), (999, 'Menolak / Refused')], default=995)),
                ('monetarysanction', models.PositiveSmallIntegerField(choices=[(0, 'Tidak / No'), (1, 'Ya / Yes'), (993, 'Pertanyaan tidak diminta (tidak ada skip logic) / Question not asked (no skip logic)'), (994, 'SKIP / Skipped based on survey skip logic'), (995, 'Tidak Ada data / No data'), (996, 'Lainnya / Other'), (997, 'Tidak tahu / Do not know'), (998, 'Tidak sesuai / Not applicable'), (999, 'Menolak / Refused')], default=995)),
                ('conflictl', models.TextField(default='995')),
                ('conflict', models.TextField(default='995')),
                ('conflictusertime', models.DecimalField(decimal_places=3, default=995, max_digits=6, validators=[django.core.validators.MinValueValidator(0)])),
                ('conflictofficialtime', models.DecimalField(decimal_places=3, default=995, max_digits=6, validators=[django.core.validators.MinValueValidator(0)])),
                ('conflictusercost', models.PositiveIntegerField(default=995, validators=[api.models.base.MaxValueBCValidator(1000000000)])),
                ('conflictofficialcost', models.PositiveIntegerField(default=995, validators=[api.models.base.MaxValueBCValidator(1000000000)])),
                ('conflictuserdist', models.DecimalField(decimal_places=3, default=995, max_digits=6, validators=[django.core.validators.MinValueValidator(0)])),
                ('conflictofficialdist', models.DecimalField(decimal_places=3, default=995, max_digits=6, validators=[django.core.validators.MinValueValidator(0)])),
                ('otherinfol', models.TextField(default='995')),
                ('otherinfo', models.TextField(default='995')),
                ('otherpeoplel', models.TextField(default='995')),
                ('otherpeople', models.TextField(default='995')),
                ('othersourcesl', models.TextField(default='995')),
                ('othersources', models.TextField(default='995')),
                ('traditionalgovernancel', models.TextField(default='995')),
                ('traditionalgovernance', models.TextField(default='995')),
                ('conflictn', models.PositiveSmallIntegerField(choices=[(0, 'Tidak / No'), (1, 'Ya / Yes'), (993, 'Pertanyaan tidak diminta (tidak ada skip logic) / Question not asked (no skip logic)'), (994, 'SKIP / Skipped based on survey skip logic'), (995, 'Tidak Ada data / No data'), (996, 'Lainnya / Other'), (997, 'Tidak tahu / Do not know'), (998, 'Tidak sesuai / Not applicable'), (999, 'Menolak / Refused')], default=995)),
                ('congroup', models.PositiveSmallIntegerField(choices=[(0, 'Tidak / No'), (1, 'Ya / Yes'), (993, 'Pertanyaan tidak diminta (tidak ada skip logic) / Question not asked (no skip logic)'), (994, 'SKIP / Skipped based on survey skip logic'), (995, 'Tidak Ada data / No data'), (996, 'Lainnya / Other'), (997, 'Tidak tahu / Do not know'), (998, 'Tidak sesuai / Not applicable'), (999, 'Menolak / Refused')], default=995)),
                ('conbtwgroups', models.PositiveSmallIntegerField(choices=[(0, 'Tidak / No'), (1, 'Ya / Yes'), (993, 'Pertanyaan tidak diminta (tidak ada skip logic) / Question not asked (no skip logic)'), (994, 'SKIP / Skipped based on survey skip logic'), (995, 'Tidak Ada data / No data'), (996, 'Lainnya / Other'), (997, 'Tidak tahu / Do not know'), (998, 'Tidak sesuai / Not applicable'), (999, 'Menolak / Refused')], default=995)),
                ('conbtwgroupngov', models.PositiveSmallIntegerField(choices=[(0, 'Tidak / No'), (1, 'Ya / Yes'), (993, 'Pertanyaan tidak diminta (tidak ada skip logic) / Question not asked (no skip logic)'), (994, 'SKIP / Skipped based on survey skip logic'), (995, 'Tidak Ada data / No data'), (996, 'Lainnya / Other'), (997, 'Tidak tahu / Do not know'), (998, 'Tidak sesuai / Not applicable'), (999, 'Menolak / Refused')], default=995)),
                ('congov', models.PositiveSmallIntegerField(choices=[(0, 'Tidak / No'), (1, 'Ya / Yes'), (993, 'Pertanyaan tidak diminta (tidak ada skip logic) / Question not asked (no skip logic)'), (994, 'SKIP / Skipped based on survey skip logic'), (995, 'Tidak Ada data / No data'), (996, 'Lainnya / Other'), (997, 'Tidak tahu / Do not know'), (998, 'Tidak sesuai / Not applicable'), (999, 'Menolak / Refused')], default=995)),
                ('contypemarine', models.PositiveSmallIntegerField(choices=[(0, 'Tidak / No'), (1, 'Ya / Yes'), (993, 'Pertanyaan tidak diminta (tidak ada skip logic) / Question not asked (no skip logic)'), (994, 'SKIP / Skipped based on survey skip logic'), (995, 'Tidak Ada data / No data'), (996, 'Lainnya / Other'), (997, 'Tidak tahu / Do not know'), (998, 'Tidak sesuai / Not applicable'), (999, 'Menolak / Refused')], default=995)),
                ('contypegov', models.PositiveSmallIntegerField(choices=[(0, 'Tidak / No'), (1, 'Ya / Yes'), (993, 'Pertanyaan tidak diminta (tidak ada skip logic) / Question not asked (no skip logic)'), (994, 'SKIP / Skipped based on survey skip logic'), (995, 'Tidak Ada data / No data'), (996, 'Lainnya / Other'), (997, 'Tidak tahu / Do not know'), (998, 'Tidak sesuai / Not applicable'), (999, 'Menolak / Refused')], default=995)),
                ('contypeusers', models.PositiveSmallIntegerField(choices=[(0, 'Tidak / No'), (1, 'Ya / Yes'), (993, 'Pertanyaan tidak diminta (tidak ada skip logic) / Question not asked (no skip logic)'), (994, 'SKIP / Skipped based on survey skip logic'), (995, 'Tidak Ada data / No data'), (996, 'Lainnya / Other'), (997, 'Tidak tahu / Do not know'), (998, 'Tidak sesuai / Not applicable'), (999, 'Menolak / Refused')], default=995)),
                ('contyperec', models.PositiveSmallIntegerField(choices=[(0, 'Tidak / No'), (1, 'Ya / Yes'), (993, 'Pertanyaan tidak diminta (tidak ada skip logic) / Question not asked (no skip logic)'), (994, 'SKIP / Skipped based on survey skip logic'), (995, 'Tidak Ada data / No data'), (996, 'Lainnya / Other'), (997, 'Tidak tahu / Do not know'), (998, 'Tidak sesuai / Not applicable'), (999, 'Menolak / Refused')], default=995)),
                ('contypeother', models.PositiveSmallIntegerField(choices=[(0, 'Tidak / No'), (1, 'Ya / Yes'), (993, 'Pertanyaan tidak diminta (tidak ada skip logic) / Question not asked (no skip logic)'), (994, 'SKIP / Skipped based on survey skip logic'), (995, 'Tidak Ada data / No data'), (996, 'Lainnya / Other'), (997, 'Tidak tahu / Do not know'), (998, 'Tidak sesuai / Not applicable'), (999, 'Menolak / Refused')], default=995)),
                ('contypeotherspecifyl', models.TextField(default='995')),
                ('contypeotherspecify', models.TextField(default='995')),
                ('notesl', models.TextField(default='995')),
                ('notes', models.TextField(default='995')),
                ('qaqcnotes', models.TextField(default='995')),
            ],
            options={
                'verbose_name': 'FGD',
                'verbose_name_plural': 'FGDs',
            },
        ),
        migrations.CreateModel(
            name='Household',
            fields=[
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('updated_on', models.DateTimeField(auto_now=True)),
                ('householdid', models.IntegerField(primary_key=True, serialize=False)),
                ('kkcode', models.PositiveSmallIntegerField(default=995, validators=[api.models.base.MinValueBCValidator(1), api.models.base.MaxValueBCValidator(999)])),
                ('yearmonitoring', models.PositiveSmallIntegerField(choices=[(2000, 2000), (2001, 2001), (2002, 2002), (2003, 2003), (2004, 2004), (2005, 2005), (2006, 2006), (2007, 2007), (2008, 2008), (2009, 2009), (2010, 2010), (2011, 2011), (2012, 2012), (2013, 2013), (2014, 2014), (2015, 2015), (2016, 2016), (2017, 2017), (2018, 2018), (2019, 2019), (2020, 2020), (2021, 2021), (2022, 2022), (2023, 2023), (2024, 2024), (2025, 2025), (2026, 2026), (2027, 2027), (2028, 2028), (2029, 2029), (2030, 2030), (2031, 2031), (2032, 2032), (2033, 2033), (2034, 2034), (2035, 2035), (2036, 2036), (2037, 2037), (2038, 2038), (2039, 2039), (2040, 2040), (2041, 2041), (2042, 2042), (2043, 2043), (2044, 2044), (2045, 2045), (2046, 2046), (2047, 2047), (2048, 2048), (2049, 2049), (2050, 2050), (993, 'Pertanyaan tidak diminta (tidak ada skip logic) / Question not asked (no skip logic)'), (994, 'SKIP / Skipped based on survey skip logic'), (995, 'Tidak Ada data / No data'), (996, 'Lainnya / Other'), (997, 'Tidak tahu / Do not know'), (998, 'Tidak sesuai / Not applicable'), (999, 'Menolak / Refused')], default=995, validators=[api.models.base.MinValueBCValidator(2000), api.models.base.MaxValueBCValidator(2050)])),
                ('interviewdate', models.DateField(blank=True, null=True)),
                ('interviewstart', models.TimeField(blank=True, null=True)),
                ('interviewend', models.TimeField(blank=True, null=True)),
                ('interviewlength', models.TimeField(blank=True, null=True)),
                ('usualfish', models.CharField(default='995', max_length=255)),
                ('householdsize', models.PositiveSmallIntegerField(default=995)),
                ('yearsresident', models.PositiveSmallIntegerField(default=995, validators=[api.models.base.MaxValueBCValidator(150)])),
                ('primarymarketname', models.CharField(default='995', max_length=255)),
                ('secondarymarketname', models.CharField(default='995', max_length=255)),
                ('timemarket', models.DecimalField(decimal_places=3, default=995, max_digits=6, validators=[django.core.validators.MinValueValidator(0)])),
                ('timesecondarymarket', models.DecimalField(decimal_places=3, default=995, max_digits=6, validators=[django.core.validators.MinValueValidator(0)])),
                ('paternalethnicity', models.CharField(default='995', max_length=255)),
                ('maternalethnicity', models.CharField(default='995', max_length=255)),
                ('religion', models.PositiveSmallIntegerField(choices=[(1, 'Kristen / Christian'), (2, 'Islam / Muslim'), (3, 'Hindu / Hindu'), (4, 'Budha / Buddhist'), (5, 'Yahudi / Jewish'), (6, 'Kepercataan Tradisional / Traditional Beliefs'), (7, 'Atheis / Atheist'), (993, 'Pertanyaan tidak diminta (tidak ada skip logic) / Question not asked (no skip logic)'), (994, 'SKIP / Skipped based on survey skip logic'), (995, 'Tidak Ada data / No data'), (996, 'Lainnya / Other'), (997, 'Tidak tahu / Do not know'), (998, 'Tidak sesuai / Not applicable'), (999, 'Menolak / Refused')], default=995)),
                ('primarylivelihoodyear', models.PositiveSmallIntegerField(choices=[(0, 'Tidak / No'), (1, 'Ya / Yes'), (993, 'Pertanyaan tidak diminta (tidak ada skip logic) / Question not asked (no skip logic)'), (994, 'SKIP / Skipped based on survey skip logic'), (995, 'Tidak Ada data / No data'), (996, 'Lainnya / Other'), (997, 'Tidak tahu / Do not know'), (998, 'Tidak sesuai / Not applicable'), (999, 'Menolak / Refused')], default=995)),
                ('secondarylivelihoodyear', models.PositiveSmallIntegerField(choices=[(0, 'Tidak / No'), (1, 'Ya / Yes'), (993, 'Pertanyaan tidak diminta (tidak ada skip logic) / Question not asked (no skip logic)'), (994, 'SKIP / Skipped based on survey skip logic'), (995, 'Tidak Ada data / No data'), (996, 'Lainnya / Other'), (997, 'Tidak tahu / Do not know'), (998, 'Tidak sesuai / Not applicable'), (999, 'Menolak / Refused')], default=995)),
                ('tertiarylivelihoodyear', models.PositiveSmallIntegerField(choices=[(0, 'Tidak / No'), (1, 'Ya / Yes'), (993, 'Pertanyaan tidak diminta (tidak ada skip logic) / Question not asked (no skip logic)'), (994, 'SKIP / Skipped based on survey skip logic'), (995, 'Tidak Ada data / No data'), (996, 'Lainnya / Other'), (997, 'Tidak tahu / Do not know'), (998, 'Tidak sesuai / Not applicable'), (999, 'Menolak / Refused')], default=995)),
                ('lessproductivedaysfishing', models.PositiveSmallIntegerField(default=995, validators=[api.models.base.MaxValueBCValidator(365)])),
                ('poorcatch', models.PositiveIntegerField(default=995)),
                ('poorcatchunits', models.CharField(default='995', max_length=255)),
                ('poorcatchunitscategory', models.PositiveSmallIntegerField(choices=[(1, 'Tali / Line'), (2, 'Ember / Bucket'), (3, 'Wayah / Wayah (no English translation available)'), (4, 'Ekor / Tail'), (5, 'Loyang / Tray'), (993, 'Pertanyaan tidak diminta (tidak ada skip logic) / Question not asked (no skip logic)'), (994, 'SKIP / Skipped based on survey skip logic'), (995, 'Tidak Ada data / No data'), (996, 'Lainnya / Other'), (997, 'Tidak tahu / Do not know'), (998, 'Tidak sesuai / Not applicable'), (999, 'Menolak / Refused')], default=995)),
                ('poorfishincome', models.PositiveIntegerField(default=995)),
                ('poorfishincomeunits', models.CharField(default='995', max_length=255)),
                ('moreproductivedaysfishing', models.PositiveSmallIntegerField(default=995, validators=[api.models.base.MaxValueBCValidator(365)])),
                ('goodcatch', models.PositiveIntegerField(default=995)),
                ('goodcatchunits', models.CharField(default='995', max_length=255)),
                ('goodcatchunitscategory', models.PositiveSmallIntegerField(choices=[(1, 'Tali / Line'), (2, 'Ember / Bucket'), (3, 'Wayah / Wayah (no English translation available)'), (4, 'Ekor / Tail'), (5, 'Loyang / Tray'), (993, 'Pertanyaan tidak diminta (tidak ada skip logic) / Question not asked (no skip logic)'), (994, 'SKIP / Skipped based on survey skip logic'), (995, 'Tidak Ada data / No data'), (996, 'Lainnya / Other'), (997, 'Tidak tahu / Do not know'), (998, 'Tidak sesuai / Not applicable'), (999, 'Menolak / Refused')], default=995)),
                ('goodfishincome', models.PositiveIntegerField(default=995)),
                ('goodfishincomeunits', models.CharField(default='995', max_length=255)),
                ('economicstatustrend', models.PositiveSmallIntegerField(choices=[(1, 'Mejadi sangat buruk / Much worse'), (2, 'Menjadi sedikit lebih buruk / Slightly worse'), (3, 'Tidak berubah / No change'), (4, 'Menjadi sedikit lebih baik / Slightly better'), (5, 'Menjadi sangat baik / Much better'), (993, 'Pertanyaan tidak diminta (tidak ada skip logic) / Question not asked (no skip logic)'), (994, 'SKIP / Skipped based on survey skip logic'), (995, 'Tidak Ada data / No data'), (996, 'Lainnya / Other'), (997, 'Tidak tahu / Do not know'), (998, 'Tidak sesuai / Not applicable'), (999, 'Menolak / Refused')], default=995)),
                ('economicstatusreasonl', models.TextField(default='995')),
                ('economicstatusreason', models.TextField(default='995')),
                ('economicadjustreasonl', models.TextField(default='995')),
                ('economicadjustreason', models.TextField(default='995')),
                ('assetcar', models.PositiveSmallIntegerField(default=995, validators=[api.models.base.MaxValueBCValidator(30)])),
                ('assetcaryear', models.PositiveSmallIntegerField(default=995, validators=[api.models.base.MinValueBCValidator(1900), api.models.base.MaxValueBCValidator(2021)])),
                ('assetcarassistanceother', models.CharField(default='995', max_length=255)),
                ('assettruck', models.PositiveSmallIntegerField(default=995, validators=[api.models.base.MaxValueBCValidator(50)])),
                ('assettruckyear', models.PositiveSmallIntegerField(default=995, validators=[api.models.base.MinValueBCValidator(1900), api.models.base.MaxValueBCValidator(2021)])),
                ('assettruckassistanceother', models.CharField(default='995', max_length=255)),
                ('assetcartruck', models.PositiveSmallIntegerField(default=995, validators=[api.models.base.MaxValueBCValidator(50)])),
                ('assetbicycle', models.PositiveSmallIntegerField(default=995, validators=[api.models.base.MaxValueBCValidator(50)])),
                ('assetbicycleyear', models.PositiveSmallIntegerField(default=995, validators=[api.models.base.MinValueBCValidator(1900), api.models.base.MaxValueBCValidator(2021)])),
                ('assetbicycleassistanceother', models.CharField(default='995', max_length=255)),
                ('assetmotorcycle', models.PositiveSmallIntegerField(default=995, validators=[api.models.base.MaxValueBCValidator(50)])),
                ('assetmotorcycleyear', models.PositiveSmallIntegerField(default=995, validators=[api.models.base.MinValueBCValidator(1900), api.models.base.MaxValueBCValidator(2021)])),
                ('assetmotorcycleassistanceother', models.CharField(default='995', max_length=255)),
                ('assetboatnomotor', models.PositiveSmallIntegerField(default=995, validators=[api.models.base.MaxValueBCValidator(50)])),
                ('assetboatnomotoryear', models.PositiveSmallIntegerField(default=995, validators=[api.models.base.MinValueBCValidator(1900), api.models.base.MaxValueBCValidator(2021)])),
                ('assetboatnomotorassistanceother', models.CharField(default='995', max_length=255)),
                ('assetboatoutboard', models.PositiveSmallIntegerField(default=995, validators=[api.models.base.MaxValueBCValidator(50)])),
                ('assetboatoutboardyear', models.PositiveSmallIntegerField(default=995, validators=[api.models.base.MinValueBCValidator(1900), api.models.base.MaxValueBCValidator(2021)])),
                ('assetboatoutboardassistanceother', models.CharField(default='995', max_length=255)),
                ('assetboatinboard', models.PositiveSmallIntegerField(default=995, validators=[api.models.base.MaxValueBCValidator(50)])),
                ('assetboatinboardyear', models.PositiveSmallIntegerField(default=995, validators=[api.models.base.MinValueBCValidator(1900), api.models.base.MaxValueBCValidator(2021)])),
                ('assetboatinboardassistanceother', models.CharField(default='995', max_length=255)),
                ('assetlandlinephone', models.PositiveSmallIntegerField(default=995, validators=[api.models.base.MaxValueBCValidator(50)])),
                ('assetlandlinephoneyear', models.PositiveSmallIntegerField(default=995, validators=[api.models.base.MinValueBCValidator(1900), api.models.base.MaxValueBCValidator(2021)])),
                ('assetlandlinephoneassistanceother', models.CharField(default='995', max_length=255)),
                ('assetcellphone', models.PositiveSmallIntegerField(default=995, validators=[api.models.base.MaxValueBCValidator(50)])),
                ('assetcellphoneyear', models.PositiveSmallIntegerField(default=995, validators=[api.models.base.MinValueBCValidator(1900), api.models.base.MaxValueBCValidator(2021)])),
                ('assetcellphoneassistanceother', models.CharField(default='995', max_length=255)),
                ('assetphonecombined', models.PositiveSmallIntegerField(default=995, validators=[api.models.base.MaxValueBCValidator(50)])),
                ('assettv', models.PositiveSmallIntegerField(default=995, validators=[api.models.base.MaxValueBCValidator(50)])),
                ('assettvyear', models.PositiveSmallIntegerField(default=995, validators=[api.models.base.MinValueBCValidator(1900), api.models.base.MaxValueBCValidator(2021)])),
                ('assettvassistanceother', models.CharField(default='995', max_length=255)),
                ('assetradio', models.PositiveSmallIntegerField(default=995, validators=[api.models.base.MaxValueBCValidator(50)])),
                ('assetradioyear', models.PositiveSmallIntegerField(default=995, validators=[api.models.base.MinValueBCValidator(1900), api.models.base.MaxValueBCValidator(2021)])),
                ('assetradioassistanceother', models.CharField(default='995', max_length=255)),
                ('assetstereo', models.PositiveSmallIntegerField(default=995, validators=[api.models.base.MaxValueBCValidator(50)])),
                ('assetstereoyear', models.PositiveSmallIntegerField(default=995, validators=[api.models.base.MinValueBCValidator(1900), api.models.base.MaxValueBCValidator(2021)])),
                ('assetstereoassistanceother', models.CharField(default='995', max_length=255)),
                ('assetcd', models.PositiveSmallIntegerField(default=995, validators=[api.models.base.MaxValueBCValidator(50)])),
                ('assetcdyear', models.PositiveSmallIntegerField(default=995, validators=[api.models.base.MinValueBCValidator(1900), api.models.base.MaxValueBCValidator(2021)])),
                ('assetcdassistanceother', models.CharField(default='995', max_length=255)),
                ('assetdvd', models.PositiveSmallIntegerField(default=995, validators=[api.models.base.MaxValueBCValidator(50)])),
                ('assetdvdyear', models.PositiveSmallIntegerField(default=995, validators=[api.models.base.MinValueBCValidator(1900), api.models.base.MaxValueBCValidator(2021)])),
                ('assetdvdassistanceother', models.CharField(default='995', max_length=255)),
                ('assetentertain', models.PositiveSmallIntegerField(default=995, validators=[api.models.base.MaxValueBCValidator(50)])),
                ('assetsatellite', models.PositiveSmallIntegerField(default=995, validators=[api.models.base.MaxValueBCValidator(50)])),
                ('assetsatelliteyear', models.PositiveSmallIntegerField(default=995, validators=[api.models.base.MinValueBCValidator(1900), api.models.base.MaxValueBCValidator(2021)])),
                ('assetsatelliteassistanceother', models.CharField(default='995', max_length=255)),
                ('assetgenerator', models.PositiveSmallIntegerField(default=995, validators=[api.models.base.MaxValueBCValidator(50)])),
                ('assetgeneratoryear', models.PositiveSmallIntegerField(default=995, validators=[api.models.base.MinValueBCValidator(1900), api.models.base.MaxValueBCValidator(2021)])),
                ('assetgeneratorassistanceother', models.CharField(default='995', max_length=255)),
                ('cookingfuel', models.PositiveSmallIntegerField(choices=[(1, 'Listrik/Gas / Electricity or gas'), (2, 'Minyak/Minyak Tanah / Oil'), (3, 'Kayu / Wood'), (4, 'Arang / Charcoal'), (5, 'Kayu ranting atau serpihan kayu / Small sticks/scrap wood'), (6, ' Serasah, daun, biogas / Weeds, leaves, dung'), (993, 'Pertanyaan tidak diminta (tidak ada skip logic) / Question not asked (no skip logic)'), (994, 'SKIP / Skipped based on survey skip logic'), (995, 'Tidak Ada data / No data'), (996, 'Lainnya / Other'), (997, 'Tidak tahu / Do not know'), (998, 'Tidak sesuai / Not applicable'), (999, 'Menolak / Refused')], default=995)),
                ('householddeath', models.PositiveSmallIntegerField(choices=[(0, 'Tidak / No'), (1, 'Ya / Yes'), (993, 'Pertanyaan tidak diminta (tidak ada skip logic) / Question not asked (no skip logic)'), (994, 'SKIP / Skipped based on survey skip logic'), (995, 'Tidak Ada data / No data'), (996, 'Lainnya / Other'), (997, 'Tidak tahu / Do not know'), (998, 'Tidak sesuai / Not applicable'), (999, 'Menolak / Refused')], default=995)),
                ('householdbirth', models.PositiveSmallIntegerField(choices=[(0, 'Tidak / No'), (1, 'Ya / Yes'), (993, 'Pertanyaan tidak diminta (tidak ada skip logic) / Question not asked (no skip logic)'), (994, 'SKIP / Skipped based on survey skip logic'), (995, 'Tidak Ada data / No data'), (996, 'Lainnya / Other'), (997, 'Tidak tahu / Do not know'), (998, 'Tidak sesuai / Not applicable'), (999, 'Menolak / Refused')], default=995)),
                ('fsnotenough', models.PositiveSmallIntegerField(choices=[(1, 'Sering / Often true'), (2, 'Kadang-kadang / Sometimes true'), (3, 'Tidak pernah / Never true'), (993, 'Pertanyaan tidak diminta (tidak ada skip logic) / Question not asked (no skip logic)'), (994, 'SKIP / Skipped based on survey skip logic'), (995, 'Tidak Ada data / No data'), (996, 'Lainnya / Other'), (997, 'Tidak tahu / Do not know'), (998, 'Tidak sesuai / Not applicable'), (999, 'Menolak / Refused')], default=995)),
                ('fsdidnotlast', models.PositiveSmallIntegerField(choices=[(1, 'Sering / Often true'), (2, 'Kadang-kadang / Sometimes true'), (3, 'Tidak pernah / Never true'), (993, 'Pertanyaan tidak diminta (tidak ada skip logic) / Question not asked (no skip logic)'), (994, 'SKIP / Skipped based on survey skip logic'), (995, 'Tidak Ada data / No data'), (996, 'Lainnya / Other'), (997, 'Tidak tahu / Do not know'), (998, 'Tidak sesuai / Not applicable'), (999, 'Menolak / Refused')], default=995)),
                ('fsbalanceddiet', models.PositiveSmallIntegerField(choices=[(1, 'Sering / Often true'), (2, 'Kadang-kadang / Sometimes true'), (3, 'Tidak pernah / Never true'), (993, 'Pertanyaan tidak diminta (tidak ada skip logic) / Question not asked (no skip logic)'), (994, 'SKIP / Skipped based on survey skip logic'), (995, 'Tidak Ada data / No data'), (996, 'Lainnya / Other'), (997, 'Tidak tahu / Do not know'), (998, 'Tidak sesuai / Not applicable'), (999, 'Menolak / Refused')], default=995)),
                ('fsadultskip', models.PositiveSmallIntegerField(choices=[(0, 'Tidak / No'), (1, 'Ya / Yes'), (993, 'Pertanyaan tidak diminta (tidak ada skip logic) / Question not asked (no skip logic)'), (994, 'SKIP / Skipped based on survey skip logic'), (995, 'Tidak Ada data / No data'), (996, 'Lainnya / Other'), (997, 'Tidak tahu / Do not know'), (998, 'Tidak sesuai / Not applicable'), (999, 'Menolak / Refused')], default=995)),
                ('fsfreqadultskip', models.PositiveSmallIntegerField(choices=[(1, 'Hampir setiap bulan / Almost every month'), (2, 'Beberapa bulan tetapi tidak setiap bulan / Some months but not every month'), (3, 'Hanya satu atau dua bulan / Only one or two months a year'), (993, 'Pertanyaan tidak diminta (tidak ada skip logic) / Question not asked (no skip logic)'), (994, 'SKIP / Skipped based on survey skip logic'), (995, 'Tidak Ada data / No data'), (996, 'Lainnya / Other'), (997, 'Tidak tahu / Do not know'), (998, 'Tidak sesuai / Not applicable'), (999, 'Menolak / Refused')], default=995)),
                ('fseatless', models.PositiveSmallIntegerField(choices=[(0, 'Tidak / No'), (1, 'Ya / Yes'), (993, 'Pertanyaan tidak diminta (tidak ada skip logic) / Question not asked (no skip logic)'), (994, 'SKIP / Skipped based on survey skip logic'), (995, 'Tidak Ada data / No data'), (996, 'Lainnya / Other'), (997, 'Tidak tahu / Do not know'), (998, 'Tidak sesuai / Not applicable'), (999, 'Menolak / Refused')], default=995)),
                ('fshungry', models.PositiveSmallIntegerField(choices=[(0, 'Tidak / No'), (1, 'Ya / Yes'), (993, 'Pertanyaan tidak diminta (tidak ada skip logic) / Question not asked (no skip logic)'), (994, 'SKIP / Skipped based on survey skip logic'), (995, 'Tidak Ada data / No data'), (996, 'Lainnya / Other'), (997, 'Tidak tahu / Do not know'), (998, 'Tidak sesuai / Not applicable'), (999, 'Menolak / Refused')], default=995)),
                ('fschildportion', models.PositiveSmallIntegerField(choices=[(0, 'Tidak / No'), (1, 'Ya / Yes'), (993, 'Pertanyaan tidak diminta (tidak ada skip logic) / Question not asked (no skip logic)'), (994, 'SKIP / Skipped based on survey skip logic'), (995, 'Tidak Ada data / No data'), (996, 'Lainnya / Other'), (997, 'Tidak tahu / Do not know'), (998, 'Tidak sesuai / Not applicable'), (999, 'Menolak / Refused')], default=995)),
                ('fslowcostfood', models.PositiveSmallIntegerField(choices=[(1, 'Sering / Often true'), (2, 'Kadang-kadang / Sometimes true'), (3, 'Tidak pernah / Never true'), (993, 'Pertanyaan tidak diminta (tidak ada skip logic) / Question not asked (no skip logic)'), (994, 'SKIP / Skipped based on survey skip logic'), (995, 'Tidak Ada data / No data'), (996, 'Lainnya / Other'), (997, 'Tidak tahu / Do not know'), (998, 'Tidak sesuai / Not applicable'), (999, 'Menolak / Refused')], default=995)),
                ('fschildskip', models.PositiveSmallIntegerField(choices=[(0, 'Tidak / No'), (1, 'Ya / Yes'), (993, 'Pertanyaan tidak diminta (tidak ada skip logic) / Question not asked (no skip logic)'), (994, 'SKIP / Skipped based on survey skip logic'), (995, 'Tidak Ada data / No data'), (996, 'Lainnya / Other'), (997, 'Tidak tahu / Do not know'), (998, 'Tidak sesuai / Not applicable'), (999, 'Menolak / Refused')], default=995)),
                ('fsfreqchildskip', models.PositiveSmallIntegerField(choices=[(1, 'Hampir setiap bulan / Almost every month'), (2, 'Beberapa bulan tetapi tidak setiap bulan / Some months but not every month'), (3, 'Hanya satu atau dua bulan / Only one or two months a year'), (993, 'Pertanyaan tidak diminta (tidak ada skip logic) / Question not asked (no skip logic)'), (994, 'SKIP / Skipped based on survey skip logic'), (995, 'Tidak Ada data / No data'), (996, 'Lainnya / Other'), (997, 'Tidak tahu / Do not know'), (998, 'Tidak sesuai / Not applicable'), (999, 'Menolak / Refused')], default=995)),
                ('fsnomealchild', models.PositiveSmallIntegerField(choices=[(1, 'Sering / Often true'), (2, 'Kadang-kadang / Sometimes true'), (3, 'Tidak pernah / Never true'), (993, 'Pertanyaan tidak diminta (tidak ada skip logic) / Question not asked (no skip logic)'), (994, 'SKIP / Skipped based on survey skip logic'), (995, 'Tidak Ada data / No data'), (996, 'Lainnya / Other'), (997, 'Tidak tahu / Do not know'), (998, 'Tidak sesuai / Not applicable'), (999, 'Menolak / Refused')], default=995)),
                ('rightsaccess', models.PositiveSmallIntegerField(choices=[(0, 'Tidak / No'), (1, 'Ya / Yes'), (993, 'Pertanyaan tidak diminta (tidak ada skip logic) / Question not asked (no skip logic)'), (994, 'SKIP / Skipped based on survey skip logic'), (995, 'Tidak Ada data / No data'), (996, 'Lainnya / Other'), (997, 'Tidak tahu / Do not know'), (998, 'Tidak sesuai / Not applicable'), (999, 'Menolak / Refused')], default=995)),
                ('rightsharvest', models.PositiveSmallIntegerField(choices=[(0, 'Tidak / No'), (1, 'Ya / Yes'), (993, 'Pertanyaan tidak diminta (tidak ada skip logic) / Question not asked (no skip logic)'), (994, 'SKIP / Skipped based on survey skip logic'), (995, 'Tidak Ada data / No data'), (996, 'Lainnya / Other'), (997, 'Tidak tahu / Do not know'), (998, 'Tidak sesuai / Not applicable'), (999, 'Menolak / Refused')], default=995)),
                ('rightsmanage', models.PositiveSmallIntegerField(choices=[(0, 'Tidak / No'), (1, 'Ya / Yes'), (993, 'Pertanyaan tidak diminta (tidak ada skip logic) / Question not asked (no skip logic)'), (994, 'SKIP / Skipped based on survey skip logic'), (995, 'Tidak Ada data / No data'), (996, 'Lainnya / Other'), (997, 'Tidak tahu / Do not know'), (998, 'Tidak sesuai / Not applicable'), (999, 'Menolak / Refused')], default=995)),
                ('rightsexclude', models.PositiveSmallIntegerField(choices=[(0, 'Tidak / No'), (1, 'Ya / Yes'), (993, 'Pertanyaan tidak diminta (tidak ada skip logic) / Question not asked (no skip logic)'), (994, 'SKIP / Skipped based on survey skip logic'), (995, 'Tidak Ada data / No data'), (996, 'Lainnya / Other'), (997, 'Tidak tahu / Do not know'), (998, 'Tidak sesuai / Not applicable'), (999, 'Menolak / Refused')], default=995)),
                ('rightstransfer', models.PositiveSmallIntegerField(choices=[(0, 'Tidak / No'), (1, 'Ya / Yes'), (993, 'Pertanyaan tidak diminta (tidak ada skip logic) / Question not asked (no skip logic)'), (994, 'SKIP / Skipped based on survey skip logic'), (995, 'Tidak Ada data / No data'), (996, 'Lainnya / Other'), (997, 'Tidak tahu / Do not know'), (998, 'Tidak sesuai / Not applicable'), (999, 'Menolak / Refused')], default=995)),
                ('socialconflict', models.PositiveSmallIntegerField(choices=[(1, 'Sangat meningkat / Greatly Increased'), (2, 'Meningkat / Increased'), (3, 'Tidak ada perubahan / Neither increased nor decreased'), (4, 'Menurun / Decreased'), (5, 'Sangat menurum / Greatly decreased'), (993, 'Pertanyaan tidak diminta (tidak ada skip logic) / Question not asked (no skip logic)'), (994, 'SKIP / Skipped based on survey skip logic'), (995, 'Tidak Ada data / No data'), (996, 'Lainnya / Other'), (997, 'Tidak tahu / Do not know'), (998, 'Tidak sesuai / Not applicable'), (999, 'Menolak / Refused')], default=995)),
                ('marinegroup', models.PositiveSmallIntegerField(choices=[(0, 'Tidak / No'), (1, 'Ya / Yes'), (993, 'Pertanyaan tidak diminta (tidak ada skip logic) / Question not asked (no skip logic)'), (994, 'SKIP / Skipped based on survey skip logic'), (995, 'Tidak Ada data / No data'), (996, 'Lainnya / Other'), (997, 'Tidak tahu / Do not know'), (998, 'Tidak sesuai / Not applicable'), (999, 'Menolak / Refused')], default=995)),
                ('numbermarinegroup', models.PositiveSmallIntegerField(default=995)),
                ('othergroup', models.PositiveSmallIntegerField(choices=[(0, 'Tidak / No'), (1, 'Ya / Yes'), (993, 'Pertanyaan tidak diminta (tidak ada skip logic) / Question not asked (no skip logic)'), (994, 'SKIP / Skipped based on survey skip logic'), (995, 'Tidak Ada data / No data'), (996, 'Lainnya / Other'), (997, 'Tidak tahu / Do not know'), (998, 'Tidak sesuai / Not applicable'), (999, 'Menolak / Refused')], default=995)),
                ('numberothergroup', models.PositiveSmallIntegerField(default=995)),
                ('votedistrict', models.PositiveSmallIntegerField(choices=[(0, 'Tidak / No'), (1, 'Ya / Yes'), (993, 'Pertanyaan tidak diminta (tidak ada skip logic) / Question not asked (no skip logic)'), (994, 'SKIP / Skipped based on survey skip logic'), (995, 'Tidak Ada data / No data'), (996, 'Lainnya / Other'), (997, 'Tidak tahu / Do not know'), (998, 'Tidak sesuai / Not applicable'), (999, 'Menolak / Refused')], default=995)),
                ('votenational', models.PositiveSmallIntegerField(choices=[(0, 'Tidak / No'), (1, 'Ya / Yes'), (993, 'Pertanyaan tidak diminta (tidak ada skip logic) / Question not asked (no skip logic)'), (994, 'SKIP / Skipped based on survey skip logic'), (995, 'Tidak Ada data / No data'), (996, 'Lainnya / Other'), (997, 'Tidak tahu / Do not know'), (998, 'Tidak sesuai / Not applicable'), (999, 'Menolak / Refused')], default=995)),
                ('numlocalthreat', models.PositiveSmallIntegerField(default=995)),
                ('numglobalthreat', models.PositiveSmallIntegerField(default=995)),
                ('numlocalaction', models.PositiveSmallIntegerField(default=995)),
                ('numglobalaction', models.PositiveSmallIntegerField(default=995)),
                ('placehappy', models.PositiveSmallIntegerField(choices=[(1, 'Apakah anda sangat tidak setuju / Strongly disagree'), (2, 'Tidak setuju / Disagree'), (3, 'Netral / Neither agree nor disagree'), (4, 'Setuju atau / Agree'), (5, 'Dangat setuju dengan pernyataan ini / Strongly agree'), (993, 'Pertanyaan tidak diminta (tidak ada skip logic) / Question not asked (no skip logic)'), (994, 'SKIP / Skipped based on survey skip logic'), (995, 'Tidak Ada data / No data'), (996, 'Lainnya / Other'), (997, 'Tidak tahu / Do not know'), (998, 'Tidak sesuai / Not applicable'), (999, 'Menolak / Refused')], default=995)),
                ('placefavourite', models.PositiveSmallIntegerField(choices=[(1, 'Apakah anda sangat tidak setuju / Strongly disagree'), (2, 'Tidak setuju / Disagree'), (3, 'Netral / Neither agree nor disagree'), (4, 'Setuju atau / Agree'), (5, 'Dangat setuju dengan pernyataan ini / Strongly agree'), (993, 'Pertanyaan tidak diminta (tidak ada skip logic) / Question not asked (no skip logic)'), (994, 'SKIP / Skipped based on survey skip logic'), (995, 'Tidak Ada data / No data'), (996, 'Lainnya / Other'), (997, 'Tidak tahu / Do not know'), (998, 'Tidak sesuai / Not applicable'), (999, 'Menolak / Refused')], default=995)),
                ('placemiss', models.PositiveSmallIntegerField(choices=[(1, 'Apakah anda sangat tidak setuju / Strongly disagree'), (2, 'Tidak setuju / Disagree'), (3, 'Netral / Neither agree nor disagree'), (4, 'Setuju atau / Agree'), (5, 'Dangat setuju dengan pernyataan ini / Strongly agree'), (993, 'Pertanyaan tidak diminta (tidak ada skip logic) / Question not asked (no skip logic)'), (994, 'SKIP / Skipped based on survey skip logic'), (995, 'Tidak Ada data / No data'), (996, 'Lainnya / Other'), (997, 'Tidak tahu / Do not know'), (998, 'Tidak sesuai / Not applicable'), (999, 'Menolak / Refused')], default=995)),
                ('placebest', models.PositiveSmallIntegerField(choices=[(1, 'Apakah anda sangat tidak setuju / Strongly disagree'), (2, 'Tidak setuju / Disagree'), (3, 'Netral / Neither agree nor disagree'), (4, 'Setuju atau / Agree'), (5, 'Dangat setuju dengan pernyataan ini / Strongly agree'), (993, 'Pertanyaan tidak diminta (tidak ada skip logic) / Question not asked (no skip logic)'), (994, 'SKIP / Skipped based on survey skip logic'), (995, 'Tidak Ada data / No data'), (996, 'Lainnya / Other'), (997, 'Tidak tahu / Do not know'), (998, 'Tidak sesuai / Not applicable'), (999, 'Menolak / Refused')], default=995)),
                ('placefishhere', models.PositiveSmallIntegerField(choices=[(1, 'Apakah anda sangat tidak setuju / Strongly disagree'), (2, 'Tidak setuju / Disagree'), (3, 'Netral / Neither agree nor disagree'), (4, 'Setuju atau / Agree'), (5, 'Dangat setuju dengan pernyataan ini / Strongly agree'), (993, 'Pertanyaan tidak diminta (tidak ada skip logic) / Question not asked (no skip logic)'), (994, 'SKIP / Skipped based on survey skip logic'), (995, 'Tidak Ada data / No data'), (996, 'Lainnya / Other'), (997, 'Tidak tahu / Do not know'), (998, 'Tidak sesuai / Not applicable'), (999, 'Menolak / Refused')], default=995)),
                ('placebemyself', models.PositiveSmallIntegerField(choices=[(1, 'Apakah anda sangat tidak setuju / Strongly disagree'), (2, 'Tidak setuju / Disagree'), (3, 'Netral / Neither agree nor disagree'), (4, 'Setuju atau / Agree'), (5, 'Dangat setuju dengan pernyataan ini / Strongly agree'), (993, 'Pertanyaan tidak diminta (tidak ada skip logic) / Question not asked (no skip logic)'), (994, 'SKIP / Skipped based on survey skip logic'), (995, 'Tidak Ada data / No data'), (996, 'Lainnya / Other'), (997, 'Tidak tahu / Do not know'), (998, 'Tidak sesuai / Not applicable'), (999, 'Menolak / Refused')], default=995)),
                ('primarylivelihoodcovid', models.PositiveSmallIntegerField(choices=[(0, 'Tidak / No'), (1, 'Ya / Yes'), (993, 'Pertanyaan tidak diminta (tidak ada skip logic) / Question not asked (no skip logic)'), (994, 'SKIP / Skipped based on survey skip logic'), (995, 'Tidak Ada data / No data'), (996, 'Lainnya / Other'), (997, 'Tidak tahu / Do not know'), (998, 'Tidak sesuai / Not applicable'), (999, 'Menolak / Refused')], default=995)),
                ('secondarylivelihoodcovid', models.PositiveSmallIntegerField(choices=[(0, 'Tidak / No'), (1, 'Ya / Yes'), (993, 'Pertanyaan tidak diminta (tidak ada skip logic) / Question not asked (no skip logic)'), (994, 'SKIP / Skipped based on survey skip logic'), (995, 'Tidak Ada data / No data'), (996, 'Lainnya / Other'), (997, 'Tidak tahu / Do not know'), (998, 'Tidak sesuai / Not applicable'), (999, 'Menolak / Refused')], default=995)),
                ('tertiarylivelihoodcovid', models.PositiveSmallIntegerField(choices=[(0, 'Tidak / No'), (1, 'Ya / Yes'), (993, 'Pertanyaan tidak diminta (tidak ada skip logic) / Question not asked (no skip logic)'), (994, 'SKIP / Skipped based on survey skip logic'), (995, 'Tidak Ada data / No data'), (996, 'Lainnya / Other'), (997, 'Tidak tahu / Do not know'), (998, 'Tidak sesuai / Not applicable'), (999, 'Menolak / Refused')], default=995)),
                ('freqfishtimecovid', models.PositiveSmallIntegerField(choices=[(0, 'Tidak / No'), (1, 'Ya / Yes'), (993, 'Pertanyaan tidak diminta (tidak ada skip logic) / Question not asked (no skip logic)'), (994, 'SKIP / Skipped based on survey skip logic'), (995, 'Tidak Ada data / No data'), (996, 'Lainnya / Other'), (997, 'Tidak tahu / Do not know'), (998, 'Tidak sesuai / Not applicable'), (999, 'Menolak / Refused')], default=995)),
                ('freqsalefishcovid', models.PositiveSmallIntegerField(choices=[(0, 'Tidak / No'), (1, 'Ya / Yes'), (993, 'Pertanyaan tidak diminta (tidak ada skip logic) / Question not asked (no skip logic)'), (994, 'SKIP / Skipped based on survey skip logic'), (995, 'Tidak Ada data / No data'), (996, 'Lainnya / Other'), (997, 'Tidak tahu / Do not know'), (998, 'Tidak sesuai / Not applicable'), (999, 'Menolak / Refused')], default=995)),
                ('percentincomefishcovid', models.PositiveSmallIntegerField(choices=[(0, 'Tidak / No'), (1, 'Ya / Yes'), (993, 'Pertanyaan tidak diminta (tidak ada skip logic) / Question not asked (no skip logic)'), (994, 'SKIP / Skipped based on survey skip logic'), (995, 'Tidak Ada data / No data'), (996, 'Lainnya / Other'), (997, 'Tidak tahu / Do not know'), (998, 'Tidak sesuai / Not applicable'), (999, 'Menolak / Refused')], default=995)),
                ('freqeatfishcovid', models.PositiveSmallIntegerField(choices=[(0, 'Tidak / No'), (1, 'Ya / Yes'), (993, 'Pertanyaan tidak diminta (tidak ada skip logic) / Question not asked (no skip logic)'), (994, 'SKIP / Skipped based on survey skip logic'), (995, 'Tidak Ada data / No data'), (996, 'Lainnya / Other'), (997, 'Tidak tahu / Do not know'), (998, 'Tidak sesuai / Not applicable'), (999, 'Menolak / Refused')], default=995)),
                ('percentproteinfishcovid', models.PositiveSmallIntegerField(choices=[(0, 'Tidak / No'), (1, 'Ya / Yes'), (993, 'Pertanyaan tidak diminta (tidak ada skip logic) / Question not asked (no skip logic)'), (994, 'SKIP / Skipped based on survey skip logic'), (995, 'Tidak Ada data / No data'), (996, 'Lainnya / Other'), (997, 'Tidak tahu / Do not know'), (998, 'Tidak sesuai / Not applicable'), (999, 'Menolak / Refused')], default=995)),
                ('majorfishtechniquecovid', models.PositiveSmallIntegerField(choices=[(0, 'Tidak / No'), (1, 'Ya / Yes'), (993, 'Pertanyaan tidak diminta (tidak ada skip logic) / Question not asked (no skip logic)'), (994, 'SKIP / Skipped based on survey skip logic'), (995, 'Tidak Ada data / No data'), (996, 'Lainnya / Other'), (997, 'Tidak tahu / Do not know'), (998, 'Tidak sesuai / Not applicable'), (999, 'Menolak / Refused')], default=995)),
                ('poorfishincomecovid', models.PositiveSmallIntegerField(choices=[(0, 'Tidak / No'), (1, 'Ya / Yes'), (993, 'Pertanyaan tidak diminta (tidak ada skip logic) / Question not asked (no skip logic)'), (994, 'SKIP / Skipped based on survey skip logic'), (995, 'Tidak Ada data / No data'), (996, 'Lainnya / Other'), (997, 'Tidak tahu / Do not know'), (998, 'Tidak sesuai / Not applicable'), (999, 'Menolak / Refused')], default=995)),
                ('goodfishincomecovid', models.PositiveSmallIntegerField(choices=[(0, 'Tidak / No'), (1, 'Ya / Yes'), (993, 'Pertanyaan tidak diminta (tidak ada skip logic) / Question not asked (no skip logic)'), (994, 'SKIP / Skipped based on survey skip logic'), (995, 'Tidak Ada data / No data'), (996, 'Lainnya / Other'), (997, 'Tidak tahu / Do not know'), (998, 'Tidak sesuai / Not applicable'), (999, 'Menolak / Refused')], default=995)),
                ('fsnotenoughcovid', models.PositiveSmallIntegerField(choices=[(0, 'Tidak / No'), (1, 'Ya / Yes'), (993, 'Pertanyaan tidak diminta (tidak ada skip logic) / Question not asked (no skip logic)'), (994, 'SKIP / Skipped based on survey skip logic'), (995, 'Tidak Ada data / No data'), (996, 'Lainnya / Other'), (997, 'Tidak tahu / Do not know'), (998, 'Tidak sesuai / Not applicable'), (999, 'Menolak / Refused')], default=995)),
                ('fsdidnotlastcovid', models.PositiveSmallIntegerField(choices=[(0, 'Tidak / No'), (1, 'Ya / Yes'), (993, 'Pertanyaan tidak diminta (tidak ada skip logic) / Question not asked (no skip logic)'), (994, 'SKIP / Skipped based on survey skip logic'), (995, 'Tidak Ada data / No data'), (996, 'Lainnya / Other'), (997, 'Tidak tahu / Do not know'), (998, 'Tidak sesuai / Not applicable'), (999, 'Menolak / Refused')], default=995)),
                ('fsbalanceddietcovid', models.PositiveSmallIntegerField(choices=[(0, 'Tidak / No'), (1, 'Ya / Yes'), (993, 'Pertanyaan tidak diminta (tidak ada skip logic) / Question not asked (no skip logic)'), (994, 'SKIP / Skipped based on survey skip logic'), (995, 'Tidak Ada data / No data'), (996, 'Lainnya / Other'), (997, 'Tidak tahu / Do not know'), (998, 'Tidak sesuai / Not applicable'), (999, 'Menolak / Refused')], default=995)),
                ('fseatlesscovid', models.PositiveSmallIntegerField(choices=[(0, 'Tidak / No'), (1, 'Ya / Yes'), (993, 'Pertanyaan tidak diminta (tidak ada skip logic) / Question not asked (no skip logic)'), (994, 'SKIP / Skipped based on survey skip logic'), (995, 'Tidak Ada data / No data'), (996, 'Lainnya / Other'), (997, 'Tidak tahu / Do not know'), (998, 'Tidak sesuai / Not applicable'), (999, 'Menolak / Refused')], default=995)),
                ('fshungrycovid', models.PositiveSmallIntegerField(choices=[(0, 'Tidak / No'), (1, 'Ya / Yes'), (993, 'Pertanyaan tidak diminta (tidak ada skip logic) / Question not asked (no skip logic)'), (994, 'SKIP / Skipped based on survey skip logic'), (995, 'Tidak Ada data / No data'), (996, 'Lainnya / Other'), (997, 'Tidak tahu / Do not know'), (998, 'Tidak sesuai / Not applicable'), (999, 'Menolak / Refused')], default=995)),
                ('fschildportioncovid', models.PositiveSmallIntegerField(choices=[(0, 'Tidak / No'), (1, 'Ya / Yes'), (993, 'Pertanyaan tidak diminta (tidak ada skip logic) / Question not asked (no skip logic)'), (994, 'SKIP / Skipped based on survey skip logic'), (995, 'Tidak Ada data / No data'), (996, 'Lainnya / Other'), (997, 'Tidak tahu / Do not know'), (998, 'Tidak sesuai / Not applicable'), (999, 'Menolak / Refused')], default=995)),
                ('fslowcostfoodcovid', models.PositiveSmallIntegerField(choices=[(0, 'Tidak / No'), (1, 'Ya / Yes'), (993, 'Pertanyaan tidak diminta (tidak ada skip logic) / Question not asked (no skip logic)'), (994, 'SKIP / Skipped based on survey skip logic'), (995, 'Tidak Ada data / No data'), (996, 'Lainnya / Other'), (997, 'Tidak tahu / Do not know'), (998, 'Tidak sesuai / Not applicable'), (999, 'Menolak / Refused')], default=995)),
                ('fsfreqchildskipcovid', models.PositiveSmallIntegerField(choices=[(0, 'Tidak / No'), (1, 'Ya / Yes'), (993, 'Pertanyaan tidak diminta (tidak ada skip logic) / Question not asked (no skip logic)'), (994, 'SKIP / Skipped based on survey skip logic'), (995, 'Tidak Ada data / No data'), (996, 'Lainnya / Other'), (997, 'Tidak tahu / Do not know'), (998, 'Tidak sesuai / Not applicable'), (999, 'Menolak / Refused')], default=995)),
                ('fsnomealchildcovid', models.PositiveSmallIntegerField(choices=[(0, 'Tidak / No'), (1, 'Ya / Yes'), (993, 'Pertanyaan tidak diminta (tidak ada skip logic) / Question not asked (no skip logic)'), (994, 'SKIP / Skipped based on survey skip logic'), (995, 'Tidak Ada data / No data'), (996, 'Lainnya / Other'), (997, 'Tidak tahu / Do not know'), (998, 'Tidak sesuai / Not applicable'), (999, 'Menolak / Refused')], default=995)),
                ('marinegroupcovid', models.TextField(default='995')),
                ('othergroupcovid', models.TextField(default='995')),
                ('anyotherinfo', models.TextField(default='995')),
                ('willingparticipant', models.TextField(default='995')),
                ('notes', models.TextField(default='995')),
                ('dataentrycomplete', models.BooleanField(blank=True, null=True)),
                ('datacheckcomplete', models.BooleanField(blank=True, null=True)),
                ('worstdaycatch', models.CharField(default='995', max_length=255)),
                ('worstdaycatchunits', models.CharField(default='995', max_length=255)),
                ('bestdaycatch', models.CharField(default='995', max_length=255)),
                ('bestdaycatchunits', models.CharField(default='995', max_length=255)),
                ('averageincome', models.CharField(default='995', max_length=255)),
                ('averageincomeunits', models.CharField(default='995', max_length=255)),
                ('worstincome', models.CharField(default='995', max_length=255)),
                ('worstincomeunits', models.CharField(default='995', max_length=255)),
                ('bestincome', models.CharField(default='995', max_length=255)),
                ('bestincomeunits', models.CharField(default='995', max_length=255)),
                ('entrycomputeridentifier', models.CharField(default='995', max_length=255)),
                ('entryhouseholdid', models.IntegerField(blank=True, null=True)),
                ('pilotreferencecode', models.CharField(default='995', max_length=255)),
                ('baseline_t2_pairs', models.FloatField(blank=True, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='KII',
            fields=[
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('updated_on', models.DateTimeField(auto_now=True)),
                ('kiiid', models.IntegerField(primary_key=True, serialize=False)),
                ('kiicode', models.PositiveSmallIntegerField(default=995, validators=[api.models.base.MinValueBCValidator(1), api.models.base.MaxValueBCValidator(999)])),
                ('keyinformantrole', models.CharField(default='995', max_length=255)),
                ('kiidate', models.DateField(blank=True, null=True)),
                ('yearmonitoring', models.PositiveSmallIntegerField(choices=[(2000, 2000), (2001, 2001), (2002, 2002), (2003, 2003), (2004, 2004), (2005, 2005), (2006, 2006), (2007, 2007), (2008, 2008), (2009, 2009), (2010, 2010), (2011, 2011), (2012, 2012), (2013, 2013), (2014, 2014), (2015, 2015), (2016, 2016), (2017, 2017), (2018, 2018), (2019, 2019), (2020, 2020), (2021, 2021), (2022, 2022), (2023, 2023), (2024, 2024), (2025, 2025), (2026, 2026), (2027, 2027), (2028, 2028), (2029, 2029), (2030, 2030), (2031, 2031), (2032, 2032), (2033, 2033), (2034, 2034), (2035, 2035), (2036, 2036), (2037, 2037), (2038, 2038), (2039, 2039), (2040, 2040), (2041, 2041), (2042, 2042), (2043, 2043), (2044, 2044), (2045, 2045), (2046, 2046), (2047, 2047), (2048, 2048), (2049, 2049), (2050, 2050), (993, 'Pertanyaan tidak diminta (tidak ada skip logic) / Question not asked (no skip logic)'), (994, 'SKIP / Skipped based on survey skip logic'), (995, 'Tidak Ada data / No data'), (996, 'Lainnya / Other'), (997, 'Tidak tahu / Do not know'), (998, 'Tidak sesuai / Not applicable'), (999, 'Menolak / Refused')], default=995, validators=[api.models.base.MinValueBCValidator(2000), api.models.base.MaxValueBCValidator(2050)])),
                ('starttime', models.TimeField(blank=True, null=True)),
                ('endtime', models.TimeField(blank=True, null=True)),
                ('mpahistoryl', models.TextField(default='995')),
                ('mpahistory', models.TextField(default='995')),
                ('pilotnzones', models.PositiveSmallIntegerField(default=995)),
                ('ecozone', models.PositiveSmallIntegerField(choices=[(0, 'Tidak / No'), (1, 'Ya / Yes'), (993, 'Pertanyaan tidak diminta (tidak ada skip logic) / Question not asked (no skip logic)'), (994, 'SKIP / Skipped based on survey skip logic'), (995, 'Tidak Ada data / No data'), (996, 'Lainnya / Other'), (997, 'Tidak tahu / Do not know'), (998, 'Tidak sesuai / Not applicable'), (999, 'Menolak / Refused')], default=995)),
                ('soczone', models.PositiveSmallIntegerField(choices=[(0, 'Tidak / No'), (1, 'Ya / Yes'), (993, 'Pertanyaan tidak diminta (tidak ada skip logic) / Question not asked (no skip logic)'), (994, 'SKIP / Skipped based on survey skip logic'), (995, 'Tidak Ada data / No data'), (996, 'Lainnya / Other'), (997, 'Tidak tahu / Do not know'), (998, 'Tidak sesuai / Not applicable'), (999, 'Menolak / Refused')], default=995)),
                ('druleeco', models.PositiveSmallIntegerField(choices=[(1, 'Tidak pernah / Never'), (2, 'Hampir tidak pernah / Rarely'), (3, 'Kadang-kadang / Sometimes'), (4, 'Biasanya / Usually'), (5, 'Selalu / Always'), (993, 'Pertanyaan tidak diminta (tidak ada skip logic) / Question not asked (no skip logic)'), (994, 'SKIP / Skipped based on survey skip logic'), (995, 'Tidak Ada data / No data'), (996, 'Lainnya / Other'), (997, 'Tidak tahu / Do not know'), (998, 'Tidak sesuai / Not applicable'), (999, 'Menolak / Refused')], default=995)),
                ('drulesoc', models.PositiveSmallIntegerField(choices=[(1, 'Tidak pernah / Never'), (2, 'Hampir tidak pernah / Rarely'), (3, 'Kadang-kadang / Sometimes'), (4, 'Biasanya / Usually'), (5, 'Selalu / Always'), (993, 'Pertanyaan tidak diminta (tidak ada skip logic) / Question not asked (no skip logic)'), (994, 'SKIP / Skipped based on survey skip logic'), (995, 'Tidak Ada data / No data'), (996, 'Lainnya / Other'), (997, 'Tidak tahu / Do not know'), (998, 'Tidak sesuai / Not applicable'), (999, 'Menolak / Refused')], default=995)),
                ('pilotnestedness', models.PositiveSmallIntegerField(default=995)),
                ('rulecomml', models.TextField(default='995')),
                ('rulecomm', models.TextField(default='995')),
                ('ruleawarel', models.TextField(default='995')),
                ('ruleaware', models.TextField(default='995')),
                ('rulepracticel', models.TextField(default='995')),
                ('rulepractice', models.TextField(default='995')),
                ('informalrulel', models.TextField(default='995')),
                ('informalrule', models.TextField(default='995')),
                ('ruleparticipationl', models.TextField(default='995')),
                ('ruleparticipation', models.TextField(default='995')),
                ('monitorl', models.TextField(default='995')),
                ('monitor', models.TextField(default='995')),
                ('penverbal', models.PositiveSmallIntegerField(choices=[(0, 'Tidak / No'), (1, 'Ya / Yes'), (993, 'Pertanyaan tidak diminta (tidak ada skip logic) / Question not asked (no skip logic)'), (994, 'SKIP / Skipped based on survey skip logic'), (995, 'Tidak Ada data / No data'), (996, 'Lainnya / Other'), (997, 'Tidak tahu / Do not know'), (998, 'Tidak sesuai / Not applicable'), (999, 'Menolak / Refused')], default=995)),
                ('penwritten', models.PositiveSmallIntegerField(choices=[(0, 'Tidak / No'), (1, 'Ya / Yes'), (993, 'Pertanyaan tidak diminta (tidak ada skip logic) / Question not asked (no skip logic)'), (994, 'SKIP / Skipped based on survey skip logic'), (995, 'Tidak Ada data / No data'), (996, 'Lainnya / Other'), (997, 'Tidak tahu / Do not know'), (998, 'Tidak sesuai / Not applicable'), (999, 'Menolak / Refused')], default=995)),
                ('penaccess', models.PositiveSmallIntegerField(choices=[(0, 'Tidak / No'), (1, 'Ya / Yes'), (993, 'Pertanyaan tidak diminta (tidak ada skip logic) / Question not asked (no skip logic)'), (994, 'SKIP / Skipped based on survey skip logic'), (995, 'Tidak Ada data / No data'), (996, 'Lainnya / Other'), (997, 'Tidak tahu / Do not know'), (998, 'Tidak sesuai / Not applicable'), (999, 'Menolak / Refused')], default=995)),
                ('penequipment', models.PositiveSmallIntegerField(choices=[(0, 'Tidak / No'), (1, 'Ya / Yes'), (993, 'Pertanyaan tidak diminta (tidak ada skip logic) / Question not asked (no skip logic)'), (994, 'SKIP / Skipped based on survey skip logic'), (995, 'Tidak Ada data / No data'), (996, 'Lainnya / Other'), (997, 'Tidak tahu / Do not know'), (998, 'Tidak sesuai / Not applicable'), (999, 'Menolak / Refused')], default=995)),
                ('penfines', models.PositiveSmallIntegerField(choices=[(0, 'Tidak / No'), (1, 'Ya / Yes'), (993, 'Pertanyaan tidak diminta (tidak ada skip logic) / Question not asked (no skip logic)'), (994, 'SKIP / Skipped based on survey skip logic'), (995, 'Tidak Ada data / No data'), (996, 'Lainnya / Other'), (997, 'Tidak tahu / Do not know'), (998, 'Tidak sesuai / Not applicable'), (999, 'Menolak / Refused')], default=995)),
                ('penincarceraton', models.PositiveSmallIntegerField(choices=[(0, 'Tidak / No'), (1, 'Ya / Yes'), (993, 'Pertanyaan tidak diminta (tidak ada skip logic) / Question not asked (no skip logic)'), (994, 'SKIP / Skipped based on survey skip logic'), (995, 'Tidak Ada data / No data'), (996, 'Lainnya / Other'), (997, 'Tidak tahu / Do not know'), (998, 'Tidak sesuai / Not applicable'), (999, 'Menolak / Refused')], default=995)),
                ('penother', models.PositiveSmallIntegerField(choices=[(0, 'Tidak / No'), (1, 'Ya / Yes'), (993, 'Pertanyaan tidak diminta (tidak ada skip logic) / Question not asked (no skip logic)'), (994, 'SKIP / Skipped based on survey skip logic'), (995, 'Tidak Ada data / No data'), (996, 'Lainnya / Other'), (997, 'Tidak tahu / Do not know'), (998, 'Tidak sesuai / Not applicable'), (999, 'Menolak / Refused')], default=995)),
                ('penotherspecifyl', models.CharField(default='995', max_length=255)),
                ('penotherspecify', models.CharField(default='995', max_length=255)),
                ('penfreq', models.PositiveSmallIntegerField(choices=[(1, 'Tidak pernah / Never'), (2, 'Hampir tidak pernah / Rarely'), (3, 'Kadang-kadang / Sometimes'), (4, 'Biasanya / Usually'), (5, 'Selalu / Always'), (993, 'Pertanyaan tidak diminta (tidak ada skip logic) / Question not asked (no skip logic)'), (994, 'SKIP / Skipped based on survey skip logic'), (995, 'Tidak Ada data / No data'), (996, 'Lainnya / Other'), (997, 'Tidak tahu / Do not know'), (998, 'Tidak sesuai / Not applicable'), (999, 'Menolak / Refused')], default=995)),
                ('penprevious', models.PositiveSmallIntegerField(choices=[(0, 'Tidak / No'), (1, 'Ya / Yes'), (993, 'Pertanyaan tidak diminta (tidak ada skip logic) / Question not asked (no skip logic)'), (994, 'SKIP / Skipped based on survey skip logic'), (995, 'Tidak Ada data / No data'), (996, 'Lainnya / Other'), (997, 'Tidak tahu / Do not know'), (998, 'Tidak sesuai / Not applicable'), (999, 'Menolak / Refused')], default=995)),
                ('peneco', models.PositiveSmallIntegerField(choices=[(0, 'Tidak / No'), (1, 'Ya / Yes'), (993, 'Pertanyaan tidak diminta (tidak ada skip logic) / Question not asked (no skip logic)'), (994, 'SKIP / Skipped based on survey skip logic'), (995, 'Tidak Ada data / No data'), (996, 'Lainnya / Other'), (997, 'Tidak tahu / Do not know'), (998, 'Tidak sesuai / Not applicable'), (999, 'Menolak / Refused')], default=995)),
                ('penecon', models.PositiveSmallIntegerField(choices=[(0, 'Tidak / No'), (1, 'Ya / Yes'), (993, 'Pertanyaan tidak diminta (tidak ada skip logic) / Question not asked (no skip logic)'), (994, 'SKIP / Skipped based on survey skip logic'), (995, 'Tidak Ada data / No data'), (996, 'Lainnya / Other'), (997, 'Tidak tahu / Do not know'), (998, 'Tidak sesuai / Not applicable'), (999, 'Menolak / Refused')], default=995)),
                ('pensoc', models.PositiveSmallIntegerField(choices=[(0, 'Tidak / No'), (1, 'Ya / Yes'), (993, 'Pertanyaan tidak diminta (tidak ada skip logic) / Question not asked (no skip logic)'), (994, 'SKIP / Skipped based on survey skip logic'), (995, 'Tidak Ada data / No data'), (996, 'Lainnya / Other'), (997, 'Tidak tahu / Do not know'), (998, 'Tidak sesuai / Not applicable'), (999, 'Menolak / Refused')], default=995)),
                ('penwealth', models.PositiveSmallIntegerField(choices=[(0, 'Tidak / No'), (1, 'Ya / Yes'), (993, 'Pertanyaan tidak diminta (tidak ada skip logic) / Question not asked (no skip logic)'), (994, 'SKIP / Skipped based on survey skip logic'), (995, 'Tidak Ada data / No data'), (996, 'Lainnya / Other'), (997, 'Tidak tahu / Do not know'), (998, 'Tidak sesuai / Not applicable'), (999, 'Menolak / Refused')], default=995)),
                ('penpower', models.PositiveSmallIntegerField(choices=[(0, 'Tidak / No'), (1, 'Ya / Yes'), (993, 'Pertanyaan tidak diminta (tidak ada skip logic) / Question not asked (no skip logic)'), (994, 'SKIP / Skipped based on survey skip logic'), (995, 'Tidak Ada data / No data'), (996, 'Lainnya / Other'), (997, 'Tidak tahu / Do not know'), (998, 'Tidak sesuai / Not applicable'), (999, 'Menolak / Refused')], default=995)),
                ('penstatus', models.PositiveSmallIntegerField(choices=[(0, 'Tidak / No'), (1, 'Ya / Yes'), (993, 'Pertanyaan tidak diminta (tidak ada skip logic) / Question not asked (no skip logic)'), (994, 'SKIP / Skipped based on survey skip logic'), (995, 'Tidak Ada data / No data'), (996, 'Lainnya / Other'), (997, 'Tidak tahu / Do not know'), (998, 'Tidak sesuai / Not applicable'), (999, 'Menolak / Refused')], default=995)),
                ('penfactorother', models.PositiveSmallIntegerField(choices=[(0, 'Tidak / No'), (1, 'Ya / Yes'), (993, 'Pertanyaan tidak diminta (tidak ada skip logic) / Question not asked (no skip logic)'), (994, 'SKIP / Skipped based on survey skip logic'), (995, 'Tidak Ada data / No data'), (996, 'Lainnya / Other'), (997, 'Tidak tahu / Do not know'), (998, 'Tidak sesuai / Not applicable'), (999, 'Menolak / Refused')], default=995)),
                ('penfactorotherspecifyl', models.CharField(default='995', max_length=255)),
                ('penfactorotherspecify', models.CharField(default='995', max_length=255)),
                ('incened', models.PositiveSmallIntegerField(choices=[(0, 'Tidak / No'), (1, 'Ya / Yes'), (993, 'Pertanyaan tidak diminta (tidak ada skip logic) / Question not asked (no skip logic)'), (994, 'SKIP / Skipped based on survey skip logic'), (995, 'Tidak Ada data / No data'), (996, 'Lainnya / Other'), (997, 'Tidak tahu / Do not know'), (998, 'Tidak sesuai / Not applicable'), (999, 'Menolak / Refused')], default=995)),
                ('incenskills', models.PositiveSmallIntegerField(choices=[(0, 'Tidak / No'), (1, 'Ya / Yes'), (993, 'Pertanyaan tidak diminta (tidak ada skip logic) / Question not asked (no skip logic)'), (994, 'SKIP / Skipped based on survey skip logic'), (995, 'Tidak Ada data / No data'), (996, 'Lainnya / Other'), (997, 'Tidak tahu / Do not know'), (998, 'Tidak sesuai / Not applicable'), (999, 'Menolak / Refused')], default=995)),
                ('incenequipment', models.PositiveSmallIntegerField(choices=[(0, 'Tidak / No'), (1, 'Ya / Yes'), (993, 'Pertanyaan tidak diminta (tidak ada skip logic) / Question not asked (no skip logic)'), (994, 'SKIP / Skipped based on survey skip logic'), (995, 'Tidak Ada data / No data'), (996, 'Lainnya / Other'), (997, 'Tidak tahu / Do not know'), (998, 'Tidak sesuai / Not applicable'), (999, 'Menolak / Refused')], default=995)),
                ('incenpurchase', models.PositiveSmallIntegerField(choices=[(0, 'Tidak / No'), (1, 'Ya / Yes'), (993, 'Pertanyaan tidak diminta (tidak ada skip logic) / Question not asked (no skip logic)'), (994, 'SKIP / Skipped based on survey skip logic'), (995, 'Tidak Ada data / No data'), (996, 'Lainnya / Other'), (997, 'Tidak tahu / Do not know'), (998, 'Tidak sesuai / Not applicable'), (999, 'Menolak / Refused')], default=995)),
                ('incenloan', models.PositiveSmallIntegerField(choices=[(0, 'Tidak / No'), (1, 'Ya / Yes'), (993, 'Pertanyaan tidak diminta (tidak ada skip logic) / Question not asked (no skip logic)'), (994, 'SKIP / Skipped based on survey skip logic'), (995, 'Tidak Ada data / No data'), (996, 'Lainnya / Other'), (997, 'Tidak tahu / Do not know'), (998, 'Tidak sesuai / Not applicable'), (999, 'Menolak / Refused')], default=995)),
                ('incenpayment', models.PositiveSmallIntegerField(choices=[(0, 'Tidak / No'), (1, 'Ya / Yes'), (993, 'Pertanyaan tidak diminta (tidak ada skip logic) / Question not asked (no skip logic)'), (994, 'SKIP / Skipped based on survey skip logic'), (995, 'Tidak Ada data / No data'), (996, 'Lainnya / Other'), (997, 'Tidak tahu / Do not know'), (998, 'Tidak sesuai / Not applicable'), (999, 'Menolak / Refused')], default=995)),
                ('incenemploy', models.PositiveSmallIntegerField(choices=[(0, 'Tidak / No'), (1, 'Ya / Yes'), (993, 'Pertanyaan tidak diminta (tidak ada skip logic) / Question not asked (no skip logic)'), (994, 'SKIP / Skipped based on survey skip logic'), (995, 'Tidak Ada data / No data'), (996, 'Lainnya / Other'), (997, 'Tidak tahu / Do not know'), (998, 'Tidak sesuai / Not applicable'), (999, 'Menolak / Refused')], default=995)),
                ('incenother', models.PositiveSmallIntegerField(choices=[(0, 'Tidak / No'), (1, 'Ya / Yes'), (993, 'Pertanyaan tidak diminta (tidak ada skip logic) / Question not asked (no skip logic)'), (994, 'SKIP / Skipped based on survey skip logic'), (995, 'Tidak Ada data / No data'), (996, 'Lainnya / Other'), (997, 'Tidak tahu / Do not know'), (998, 'Tidak sesuai / Not applicable'), (999, 'Menolak / Refused')], default=995)),
                ('incenotherspecifyl', models.CharField(default='995', max_length=255)),
                ('incenotherspecify', models.CharField(default='995', max_length=255)),
                ('ecomonverbal', models.PositiveSmallIntegerField(choices=[(0, 'Tidak / No'), (1, 'Ya / Yes'), (993, 'Pertanyaan tidak diminta (tidak ada skip logic) / Question not asked (no skip logic)'), (994, 'SKIP / Skipped based on survey skip logic'), (995, 'Tidak Ada data / No data'), (996, 'Lainnya / Other'), (997, 'Tidak tahu / Do not know'), (998, 'Tidak sesuai / Not applicable'), (999, 'Menolak / Refused')], default=995)),
                ('ecomonwritten', models.PositiveSmallIntegerField(choices=[(0, 'Tidak / No'), (1, 'Ya / Yes'), (993, 'Pertanyaan tidak diminta (tidak ada skip logic) / Question not asked (no skip logic)'), (994, 'SKIP / Skipped based on survey skip logic'), (995, 'Tidak Ada data / No data'), (996, 'Lainnya / Other'), (997, 'Tidak tahu / Do not know'), (998, 'Tidak sesuai / Not applicable'), (999, 'Menolak / Refused')], default=995)),
                ('ecomonaccess', models.PositiveSmallIntegerField(choices=[(0, 'Tidak / No'), (1, 'Ya / Yes'), (993, 'Pertanyaan tidak diminta (tidak ada skip logic) / Question not asked (no skip logic)'), (994, 'SKIP / Skipped based on survey skip logic'), (995, 'Tidak Ada data / No data'), (996, 'Lainnya / Other'), (997, 'Tidak tahu / Do not know'), (998, 'Tidak sesuai / Not applicable'), (999, 'Menolak / Refused')], default=995)),
                ('ecomonposition', models.PositiveSmallIntegerField(choices=[(0, 'Tidak / No'), (1, 'Ya / Yes'), (993, 'Pertanyaan tidak diminta (tidak ada skip logic) / Question not asked (no skip logic)'), (994, 'SKIP / Skipped based on survey skip logic'), (995, 'Tidak Ada data / No data'), (996, 'Lainnya / Other'), (997, 'Tidak tahu / Do not know'), (998, 'Tidak sesuai / Not applicable'), (999, 'Menolak / Refused')], default=995)),
                ('ecomonequipment', models.PositiveSmallIntegerField(choices=[(0, 'Tidak / No'), (1, 'Ya / Yes'), (993, 'Pertanyaan tidak diminta (tidak ada skip logic) / Question not asked (no skip logic)'), (994, 'SKIP / Skipped based on survey skip logic'), (995, 'Tidak Ada data / No data'), (996, 'Lainnya / Other'), (997, 'Tidak tahu / Do not know'), (998, 'Tidak sesuai / Not applicable'), (999, 'Menolak / Refused')], default=995)),
                ('ecomonfine', models.PositiveSmallIntegerField(choices=[(0, 'Tidak / No'), (1, 'Ya / Yes'), (993, 'Pertanyaan tidak diminta (tidak ada skip logic) / Question not asked (no skip logic)'), (994, 'SKIP / Skipped based on survey skip logic'), (995, 'Tidak Ada data / No data'), (996, 'Lainnya / Other'), (997, 'Tidak tahu / Do not know'), (998, 'Tidak sesuai / Not applicable'), (999, 'Menolak / Refused')], default=995)),
                ('ecomonincarceration', models.PositiveSmallIntegerField(choices=[(0, 'Tidak / No'), (1, 'Ya / Yes'), (993, 'Pertanyaan tidak diminta (tidak ada skip logic) / Question not asked (no skip logic)'), (994, 'SKIP / Skipped based on survey skip logic'), (995, 'Tidak Ada data / No data'), (996, 'Lainnya / Other'), (997, 'Tidak tahu / Do not know'), (998, 'Tidak sesuai / Not applicable'), (999, 'Menolak / Refused')], default=995)),
                ('ecomonother', models.PositiveSmallIntegerField(choices=[(0, 'Tidak / No'), (1, 'Ya / Yes'), (993, 'Pertanyaan tidak diminta (tidak ada skip logic) / Question not asked (no skip logic)'), (994, 'SKIP / Skipped based on survey skip logic'), (995, 'Tidak Ada data / No data'), (996, 'Lainnya / Other'), (997, 'Tidak tahu / Do not know'), (998, 'Tidak sesuai / Not applicable'), (999, 'Menolak / Refused')], default=995)),
                ('ecomonotherspecifyl', models.CharField(default='995', max_length=255)),
                ('ecomonotherspecify', models.CharField(default='995', max_length=255)),
                ('socmonverbal', models.PositiveSmallIntegerField(choices=[(0, 'Tidak / No'), (1, 'Ya / Yes'), (993, 'Pertanyaan tidak diminta (tidak ada skip logic) / Question not asked (no skip logic)'), (994, 'SKIP / Skipped based on survey skip logic'), (995, 'Tidak Ada data / No data'), (996, 'Lainnya / Other'), (997, 'Tidak tahu / Do not know'), (998, 'Tidak sesuai / Not applicable'), (999, 'Menolak / Refused')], default=995)),
                ('socmonwritten', models.PositiveSmallIntegerField(choices=[(0, 'Tidak / No'), (1, 'Ya / Yes'), (993, 'Pertanyaan tidak diminta (tidak ada skip logic) / Question not asked (no skip logic)'), (994, 'SKIP / Skipped based on survey skip logic'), (995, 'Tidak Ada data / No data'), (996, 'Lainnya / Other'), (997, 'Tidak tahu / Do not know'), (998, 'Tidak sesuai / Not applicable'), (999, 'Menolak / Refused')], default=995)),
                ('socmonaccess', models.PositiveSmallIntegerField(choices=[(0, 'Tidak / No'), (1, 'Ya / Yes'), (993, 'Pertanyaan tidak diminta (tidak ada skip logic) / Question not asked (no skip logic)'), (994, 'SKIP / Skipped based on survey skip logic'), (995, 'Tidak Ada data / No data'), (996, 'Lainnya / Other'), (997, 'Tidak tahu / Do not know'), (998, 'Tidak sesuai / Not applicable'), (999, 'Menolak / Refused')], default=995)),
                ('socmonposition', models.PositiveSmallIntegerField(choices=[(0, 'Tidak / No'), (1, 'Ya / Yes'), (993, 'Pertanyaan tidak diminta (tidak ada skip logic) / Question not asked (no skip logic)'), (994, 'SKIP / Skipped based on survey skip logic'), (995, 'Tidak Ada data / No data'), (996, 'Lainnya / Other'), (997, 'Tidak tahu / Do not know'), (998, 'Tidak sesuai / Not applicable'), (999, 'Menolak / Refused')], default=995)),
                ('socmonequipment', models.PositiveSmallIntegerField(choices=[(0, 'Tidak / No'), (1, 'Ya / Yes'), (993, 'Pertanyaan tidak diminta (tidak ada skip logic) / Question not asked (no skip logic)'), (994, 'SKIP / Skipped based on survey skip logic'), (995, 'Tidak Ada data / No data'), (996, 'Lainnya / Other'), (997, 'Tidak tahu / Do not know'), (998, 'Tidak sesuai / Not applicable'), (999, 'Menolak / Refused')], default=995)),
                ('socmonfine', models.PositiveSmallIntegerField(choices=[(0, 'Tidak / No'), (1, 'Ya / Yes'), (993, 'Pertanyaan tidak diminta (tidak ada skip logic) / Question not asked (no skip logic)'), (994, 'SKIP / Skipped based on survey skip logic'), (995, 'Tidak Ada data / No data'), (996, 'Lainnya / Other'), (997, 'Tidak tahu / Do not know'), (998, 'Tidak sesuai / Not applicable'), (999, 'Menolak / Refused')], default=995)),
                ('socmonincarceration', models.PositiveSmallIntegerField(choices=[(0, 'Tidak / No'), (1, 'Ya / Yes'), (993, 'Pertanyaan tidak diminta (tidak ada skip logic) / Question not asked (no skip logic)'), (994, 'SKIP / Skipped based on survey skip logic'), (995, 'Tidak Ada data / No data'), (996, 'Lainnya / Other'), (997, 'Tidak tahu / Do not know'), (998, 'Tidak sesuai / Not applicable'), (999, 'Menolak / Refused')], default=995)),
                ('socmonother', models.PositiveSmallIntegerField(choices=[(0, 'Tidak / No'), (1, 'Ya / Yes'), (993, 'Pertanyaan tidak diminta (tidak ada skip logic) / Question not asked (no skip logic)'), (994, 'SKIP / Skipped based on survey skip logic'), (995, 'Tidak Ada data / No data'), (996, 'Lainnya / Other'), (997, 'Tidak tahu / Do not know'), (998, 'Tidak sesuai / Not applicable'), (999, 'Menolak / Refused')], default=995)),
                ('socmonotherspecifyl', models.CharField(default='995', max_length=255)),
                ('socmonotherspecify', models.CharField(default='995', max_length=255)),
                ('compmonverbal', models.PositiveSmallIntegerField(choices=[(0, 'Tidak / No'), (1, 'Ya / Yes'), (993, 'Pertanyaan tidak diminta (tidak ada skip logic) / Question not asked (no skip logic)'), (994, 'SKIP / Skipped based on survey skip logic'), (995, 'Tidak Ada data / No data'), (996, 'Lainnya / Other'), (997, 'Tidak tahu / Do not know'), (998, 'Tidak sesuai / Not applicable'), (999, 'Menolak / Refused')], default=995)),
                ('compmonwritten', models.PositiveSmallIntegerField(choices=[(0, 'Tidak / No'), (1, 'Ya / Yes'), (993, 'Pertanyaan tidak diminta (tidak ada skip logic) / Question not asked (no skip logic)'), (994, 'SKIP / Skipped based on survey skip logic'), (995, 'Tidak Ada data / No data'), (996, 'Lainnya / Other'), (997, 'Tidak tahu / Do not know'), (998, 'Tidak sesuai / Not applicable'), (999, 'Menolak / Refused')], default=995)),
                ('compmonaccess', models.PositiveSmallIntegerField(choices=[(0, 'Tidak / No'), (1, 'Ya / Yes'), (993, 'Pertanyaan tidak diminta (tidak ada skip logic) / Question not asked (no skip logic)'), (994, 'SKIP / Skipped based on survey skip logic'), (995, 'Tidak Ada data / No data'), (996, 'Lainnya / Other'), (997, 'Tidak tahu / Do not know'), (998, 'Tidak sesuai / Not applicable'), (999, 'Menolak / Refused')], default=995)),
                ('compmonposition', models.PositiveSmallIntegerField(choices=[(0, 'Tidak / No'), (1, 'Ya / Yes'), (993, 'Pertanyaan tidak diminta (tidak ada skip logic) / Question not asked (no skip logic)'), (994, 'SKIP / Skipped based on survey skip logic'), (995, 'Tidak Ada data / No data'), (996, 'Lainnya / Other'), (997, 'Tidak tahu / Do not know'), (998, 'Tidak sesuai / Not applicable'), (999, 'Menolak / Refused')], default=995)),
                ('compmonequipment', models.PositiveSmallIntegerField(choices=[(0, 'Tidak / No'), (1, 'Ya / Yes'), (993, 'Pertanyaan tidak diminta (tidak ada skip logic) / Question not asked (no skip logic)'), (994, 'SKIP / Skipped based on survey skip logic'), (995, 'Tidak Ada data / No data'), (996, 'Lainnya / Other'), (997, 'Tidak tahu / Do not know'), (998, 'Tidak sesuai / Not applicable'), (999, 'Menolak / Refused')], default=995)),
                ('compmonfine', models.PositiveSmallIntegerField(choices=[(0, 'Tidak / No'), (1, 'Ya / Yes'), (993, 'Pertanyaan tidak diminta (tidak ada skip logic) / Question not asked (no skip logic)'), (994, 'SKIP / Skipped based on survey skip logic'), (995, 'Tidak Ada data / No data'), (996, 'Lainnya / Other'), (997, 'Tidak tahu / Do not know'), (998, 'Tidak sesuai / Not applicable'), (999, 'Menolak / Refused')], default=995)),
                ('compmonincarceration', models.PositiveSmallIntegerField(choices=[(0, 'Tidak / No'), (1, 'Ya / Yes'), (993, 'Pertanyaan tidak diminta (tidak ada skip logic) / Question not asked (no skip logic)'), (994, 'SKIP / Skipped based on survey skip logic'), (995, 'Tidak Ada data / No data'), (996, 'Lainnya / Other'), (997, 'Tidak tahu / Do not know'), (998, 'Tidak sesuai / Not applicable'), (999, 'Menolak / Refused')], default=995)),
                ('compmonother', models.PositiveSmallIntegerField(choices=[(0, 'Tidak / No'), (1, 'Ya / Yes'), (993, 'Pertanyaan tidak diminta (tidak ada skip logic) / Question not asked (no skip logic)'), (994, 'SKIP / Skipped based on survey skip logic'), (995, 'Tidak Ada data / No data'), (996, 'Lainnya / Other'), (997, 'Tidak tahu / Do not know'), (998, 'Tidak sesuai / Not applicable'), (999, 'Menolak / Refused')], default=995)),
                ('compmonotherspecifyl', models.CharField(default='995', max_length=255)),
                ('compmonotherspecify', models.CharField(default='995', max_length=255)),
                ('penmonverbal', models.PositiveSmallIntegerField(choices=[(0, 'Tidak / No'), (1, 'Ya / Yes'), (993, 'Pertanyaan tidak diminta (tidak ada skip logic) / Question not asked (no skip logic)'), (994, 'SKIP / Skipped based on survey skip logic'), (995, 'Tidak Ada data / No data'), (996, 'Lainnya / Other'), (997, 'Tidak tahu / Do not know'), (998, 'Tidak sesuai / Not applicable'), (999, 'Menolak / Refused')], default=995)),
                ('penmonwritten', models.PositiveSmallIntegerField(choices=[(0, 'Tidak / No'), (1, 'Ya / Yes'), (993, 'Pertanyaan tidak diminta (tidak ada skip logic) / Question not asked (no skip logic)'), (994, 'SKIP / Skipped based on survey skip logic'), (995, 'Tidak Ada data / No data'), (996, 'Lainnya / Other'), (997, 'Tidak tahu / Do not know'), (998, 'Tidak sesuai / Not applicable'), (999, 'Menolak / Refused')], default=995)),
                ('penmonaccess', models.PositiveSmallIntegerField(choices=[(0, 'Tidak / No'), (1, 'Ya / Yes'), (993, 'Pertanyaan tidak diminta (tidak ada skip logic) / Question not asked (no skip logic)'), (994, 'SKIP / Skipped based on survey skip logic'), (995, 'Tidak Ada data / No data'), (996, 'Lainnya / Other'), (997, 'Tidak tahu / Do not know'), (998, 'Tidak sesuai / Not applicable'), (999, 'Menolak / Refused')], default=995)),
                ('penmonposition', models.PositiveSmallIntegerField(choices=[(0, 'Tidak / No'), (1, 'Ya / Yes'), (993, 'Pertanyaan tidak diminta (tidak ada skip logic) / Question not asked (no skip logic)'), (994, 'SKIP / Skipped based on survey skip logic'), (995, 'Tidak Ada data / No data'), (996, 'Lainnya / Other'), (997, 'Tidak tahu / Do not know'), (998, 'Tidak sesuai / Not applicable'), (999, 'Menolak / Refused')], default=995)),
                ('penmonequipment', models.PositiveSmallIntegerField(choices=[(0, 'Tidak / No'), (1, 'Ya / Yes'), (993, 'Pertanyaan tidak diminta (tidak ada skip logic) / Question not asked (no skip logic)'), (994, 'SKIP / Skipped based on survey skip logic'), (995, 'Tidak Ada data / No data'), (996, 'Lainnya / Other'), (997, 'Tidak tahu / Do not know'), (998, 'Tidak sesuai / Not applicable'), (999, 'Menolak / Refused')], default=995)),
                ('penmonfine', models.PositiveSmallIntegerField(choices=[(0, 'Tidak / No'), (1, 'Ya / Yes'), (993, 'Pertanyaan tidak diminta (tidak ada skip logic) / Question not asked (no skip logic)'), (994, 'SKIP / Skipped based on survey skip logic'), (995, 'Tidak Ada data / No data'), (996, 'Lainnya / Other'), (997, 'Tidak tahu / Do not know'), (998, 'Tidak sesuai / Not applicable'), (999, 'Menolak / Refused')], default=995)),
                ('penmonincarceration', models.PositiveSmallIntegerField(choices=[(0, 'Tidak / No'), (1, 'Ya / Yes'), (993, 'Pertanyaan tidak diminta (tidak ada skip logic) / Question not asked (no skip logic)'), (994, 'SKIP / Skipped based on survey skip logic'), (995, 'Tidak Ada data / No data'), (996, 'Lainnya / Other'), (997, 'Tidak tahu / Do not know'), (998, 'Tidak sesuai / Not applicable'), (999, 'Menolak / Refused')], default=995)),
                ('penmonother', models.PositiveSmallIntegerField(choices=[(0, 'Tidak / No'), (1, 'Ya / Yes'), (993, 'Pertanyaan tidak diminta (tidak ada skip logic) / Question not asked (no skip logic)'), (994, 'SKIP / Skipped based on survey skip logic'), (995, 'Tidak Ada data / No data'), (996, 'Lainnya / Other'), (997, 'Tidak tahu / Do not know'), (998, 'Tidak sesuai / Not applicable'), (999, 'Menolak / Refused')], default=995)),
                ('penmonotherspecifyl', models.CharField(default='995', max_length=255)),
                ('penmonotherspecify', models.CharField(default='995', max_length=255)),
                ('conflictresl', models.TextField(default='995')),
                ('conflictres', models.TextField(default='995')),
                ('ecoimpactl', models.TextField(default='995')),
                ('ecoimpact', models.TextField(default='995')),
                ('socimpactl', models.TextField(default='995')),
                ('socimpact', models.TextField(default='995')),
                ('contributionl', models.TextField(default='995')),
                ('contribution', models.TextField(default='995')),
                ('benefitl', models.TextField(default='995')),
                ('benefit', models.TextField(default='995')),
                ('ecoimpactcovidl', models.TextField(default='995')),
                ('ecoimpactcovid', models.TextField(default='995')),
                ('socimpactcovidl', models.TextField(default='995')),
                ('socimpactcovid', models.TextField(default='995')),
                ('mpaimpactcovidl', models.TextField(default='995')),
                ('mpaimpactcovid', models.TextField(default='995')),
                ('anyotherinfol', models.TextField(default='995')),
                ('anyotherinfo', models.TextField(default='995')),
                ('anyotherkil', models.TextField(default='995')),
                ('anyotherki', models.TextField(default='995')),
                ('anyotherdocsl', models.TextField(default='995')),
                ('anyotherdocs', models.TextField(default='995')),
                ('notesl', models.TextField(default='995')),
                ('notes', models.TextField(default='995')),
                ('violationfreq', models.PositiveSmallIntegerField(default=995, validators=[api.models.base.MinValueBCValidator(1), api.models.base.MaxValueBCValidator(999)])),
            ],
            options={
                'verbose_name': 'KII',
                'verbose_name_plural': 'KIIs',
            },
        ),
        migrations.CreateModel(
            name='LkpFishTechCategory',
            fields=[
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('updated_on', models.DateTimeField(auto_now=True)),
                ('code', models.IntegerField(primary_key=True, serialize=False)),
                ('bahasaindonesia', models.CharField(blank=True, max_length=255)),
                ('english', models.CharField(blank=True, max_length=255)),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='lkpfishtechcategory_updated_by', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ('code',),
            },
        ),
        migrations.CreateModel(
            name='LkpNoneToAllScale',
            fields=[
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('updated_on', models.DateTimeField(auto_now=True)),
                ('code', models.IntegerField(primary_key=True, serialize=False)),
                ('bahasaindonesia', models.CharField(blank=True, max_length=255)),
                ('english', models.CharField(blank=True, max_length=255)),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='lkpnonetoallscale_updated_by', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ('code',),
            },
        ),
        migrations.CreateModel(
            name='MPA',
            fields=[
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('updated_on', models.DateTimeField(auto_now=True)),
                ('mpaid', models.IntegerField(primary_key=True, serialize=False)),
                ('mpaname', models.CharField(max_length=255)),
                ('wdpaid', models.IntegerField(blank=True, null=True)),
                ('estyear', models.PositiveSmallIntegerField(blank=True, null=True, validators=[django.core.validators.MaxValueValidator(2021)], verbose_name='year established')),
                ('notes', models.TextField(default='995')),
                ('boundary', django.contrib.gis.db.models.fields.MultiPolygonField(blank=True, geography=True, null=True, srid=4326)),
                ('size', models.IntegerField(blank=True, null=True, verbose_name='Size (km2)')),
                ('country', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.Country')),
            ],
            options={
                'verbose_name': 'MPA',
                'verbose_name_plural': 'MPAs',
                'ordering': ('mpaname', 'estyear'),
            },
        ),
        migrations.CreateModel(
            name='MPAInterviewYear',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('updated_on', models.DateTimeField(auto_now=True)),
                ('year', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(2000), django.core.validators.MaxValueValidator(2050)])),
                ('mpa', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='api.MPA')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='mpainterviewyear_updated_by', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'MPA interview year',
            },
        ),
        migrations.CreateModel(
            name='Zone',
            fields=[
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('updated_on', models.DateTimeField(auto_now=True)),
                ('zoneid', models.IntegerField(primary_key=True, serialize=False)),
                ('zonetypel', models.CharField(default='995', max_length=255)),
                ('zonetype', models.CharField(default='995', max_length=255)),
                ('zonequantity', models.PositiveSmallIntegerField(default=995)),
                ('zoneorg', models.PositiveSmallIntegerField(choices=[(0, 'Tidak / No'), (1, 'Ya / Yes'), (993, 'Pertanyaan tidak diminta (tidak ada skip logic) / Question not asked (no skip logic)'), (994, 'SKIP / Skipped based on survey skip logic'), (995, 'Tidak Ada data / No data'), (996, 'Lainnya / Other'), (997, 'Tidak tahu / Do not know'), (998, 'Tidak sesuai / Not applicable'), (999, 'Menolak / Refused')], default=995)),
                ('zonecoord', models.PositiveSmallIntegerField(choices=[(1, 'Tidak pernah / Never'), (2, 'Hampir tidak pernah / Rarely'), (3, 'Kadang-kadang / Sometimes'), (4, 'Biasanya / Usually'), (5, 'Selalu / Always'), (993, 'Pertanyaan tidak diminta (tidak ada skip logic) / Question not asked (no skip logic)'), (994, 'SKIP / Skipped based on survey skip logic'), (995, 'Tidak Ada data / No data'), (996, 'Lainnya / Other'), (997, 'Tidak tahu / Do not know'), (998, 'Tidak sesuai / Not applicable'), (999, 'Menolak / Refused')], default=995)),
                ('kii', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='api.KII')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='zone_updated_by', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Users',
            fields=[
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('updated_on', models.DateTimeField(auto_now=True)),
                ('userid', models.IntegerField(primary_key=True, serialize=False)),
                ('usercode', models.PositiveSmallIntegerField(default=995, validators=[api.models.base.MinValueBCValidator(1), api.models.base.MaxValueBCValidator(999)])),
                ('usernamel', models.CharField(default='995', max_length=255)),
                ('username', models.CharField(default='995', max_length=255)),
                ('participateestablish', models.PositiveSmallIntegerField(choices=[(0, 'Tidak / No'), (1, 'Ya / Yes'), (993, 'Pertanyaan tidak diminta (tidak ada skip logic) / Question not asked (no skip logic)'), (994, 'SKIP / Skipped based on survey skip logic'), (995, 'Tidak Ada data / No data'), (996, 'Lainnya / Other'), (997, 'Tidak tahu / Do not know'), (998, 'Tidak sesuai / Not applicable'), (999, 'Menolak / Refused')], default=995)),
                ('participateboundaries', models.PositiveSmallIntegerField(choices=[(0, 'Tidak / No'), (1, 'Ya / Yes'), (993, 'Pertanyaan tidak diminta (tidak ada skip logic) / Question not asked (no skip logic)'), (994, 'SKIP / Skipped based on survey skip logic'), (995, 'Tidak Ada data / No data'), (996, 'Lainnya / Other'), (997, 'Tidak tahu / Do not know'), (998, 'Tidak sesuai / Not applicable'), (999, 'Menolak / Refused')], default=995)),
                ('participateadmin', models.PositiveSmallIntegerField(choices=[(0, 'Tidak / No'), (1, 'Ya / Yes'), (993, 'Pertanyaan tidak diminta (tidak ada skip logic) / Question not asked (no skip logic)'), (994, 'SKIP / Skipped based on survey skip logic'), (995, 'Tidak Ada data / No data'), (996, 'Lainnya / Other'), (997, 'Tidak tahu / Do not know'), (998, 'Tidak sesuai / Not applicable'), (999, 'Menolak / Refused')], default=995)),
                ('participaterules', models.PositiveSmallIntegerField(choices=[(0, 'Tidak / No'), (1, 'Ya / Yes'), (993, 'Pertanyaan tidak diminta (tidak ada skip logic) / Question not asked (no skip logic)'), (994, 'SKIP / Skipped based on survey skip logic'), (995, 'Tidak Ada data / No data'), (996, 'Lainnya / Other'), (997, 'Tidak tahu / Do not know'), (998, 'Tidak sesuai / Not applicable'), (999, 'Menolak / Refused')], default=995)),
                ('monitoreco', models.PositiveSmallIntegerField(choices=[(1, 'Kurang dari satu kali per tahun / Less than one time per year'), (2, 'Beberapa kali per tahun / A few times per year'), (3, 'Beberapa kali per bulan / A few times per month'), (4, 'Berberapa kali per minggu / A few times per week'), (5, 'Lebih dari satu kali sehari / More than once per day'), (993, 'Pertanyaan tidak diminta (tidak ada skip logic) / Question not asked (no skip logic)'), (994, 'SKIP / Skipped based on survey skip logic'), (995, 'Tidak Ada data / No data'), (996, 'Lainnya / Other'), (997, 'Tidak tahu / Do not know'), (998, 'Tidak sesuai / Not applicable'), (999, 'Menolak / Refused')], default=995)),
                ('monitorsoc', models.PositiveSmallIntegerField(choices=[(1, 'Kurang dari satu kali per tahun / Less than one time per year'), (2, 'Beberapa kali per tahun / A few times per year'), (3, 'Beberapa kali per bulan / A few times per month'), (4, 'Berberapa kali per minggu / A few times per week'), (5, 'Lebih dari satu kali sehari / More than once per day'), (993, 'Pertanyaan tidak diminta (tidak ada skip logic) / Question not asked (no skip logic)'), (994, 'SKIP / Skipped based on survey skip logic'), (995, 'Tidak Ada data / No data'), (996, 'Lainnya / Other'), (997, 'Tidak tahu / Do not know'), (998, 'Tidak sesuai / Not applicable'), (999, 'Menolak / Refused')], default=995)),
                ('monitorcompliance', models.PositiveSmallIntegerField(choices=[(1, 'Kurang dari satu kali per tahun / Less than one time per year'), (2, 'Beberapa kali per tahun / A few times per year'), (3, 'Beberapa kali per bulan / A few times per month'), (4, 'Berberapa kali per minggu / A few times per week'), (5, 'Lebih dari satu kali sehari / More than once per day'), (993, 'Pertanyaan tidak diminta (tidak ada skip logic) / Question not asked (no skip logic)'), (994, 'SKIP / Skipped based on survey skip logic'), (995, 'Tidak Ada data / No data'), (996, 'Lainnya / Other'), (997, 'Tidak tahu / Do not know'), (998, 'Tidak sesuai / Not applicable'), (999, 'Menolak / Refused')], default=995)),
                ('enforcefreq', models.PositiveSmallIntegerField(choices=[(1, 'Kurang dari satu kali per tahun / Less than one time per year'), (2, 'Beberapa kali per tahun / A few times per year'), (3, 'Beberapa kali per bulan / A few times per month'), (4, 'Berberapa kali per minggu / A few times per week'), (5, 'Lebih dari satu kali sehari / More than once per day'), (993, 'Pertanyaan tidak diminta (tidak ada skip logic) / Question not asked (no skip logic)'), (994, 'SKIP / Skipped based on survey skip logic'), (995, 'Tidak Ada data / No data'), (996, 'Lainnya / Other'), (997, 'Tidak tahu / Do not know'), (998, 'Tidak sesuai / Not applicable'), (999, 'Menolak / Refused')], default=995)),
                ('contributionrank', models.PositiveSmallIntegerField(default=995, validators=[api.models.base.MinValueBCValidator(1), api.models.base.MaxValueBCValidator(15)])),
                ('benefitrank', models.PositiveSmallIntegerField(default=995, validators=[api.models.base.MinValueBCValidator(1), api.models.base.MaxValueBCValidator(15)])),
                ('monitorcovidl', models.TextField(default='995')),
                ('monitorcovid', models.TextField(default='995')),
                ('covidassistancel', models.TextField(default='995')),
                ('covidassistance', models.TextField(default='995')),
                ('conservationimpactcovidl', models.TextField(default='995')),
                ('conservationimpactcovid', models.TextField(default='995')),
                ('fgd', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='api.FGD')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='users_updated_by', to=settings.AUTH_USER_MODEL)),
                ('userextbnd', models.ForeignKey(default=995, on_delete=django.db.models.deletion.PROTECT, related_name='nonetoall_externalboundary', to='api.LkpNoneToAllScale')),
                ('userintbnd', models.ForeignKey(default=995, on_delete=django.db.models.deletion.PROTECT, related_name='nonetoall_internalboundary', to='api.LkpNoneToAllScale')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('updated_on', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='profile', serialize=False, to=settings.AUTH_USER_MODEL)),
                ('mpa_interviewyears', models.ManyToManyField(blank=True, to='api.MPAInterviewYear', verbose_name='MPA interview years')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='userprofile_updated_by', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Stakeholder',
            fields=[
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('updated_on', models.DateTimeField(auto_now=True)),
                ('stakeholderid', models.IntegerField(primary_key=True, serialize=False)),
                ('stakeholdernamel', models.CharField(default='995', max_length=255)),
                ('stakeholdername', models.CharField(default='995', max_length=255)),
                ('participateestablish', models.PositiveSmallIntegerField(choices=[(0, 'Tidak / No'), (1, 'Ya / Yes'), (993, 'Pertanyaan tidak diminta (tidak ada skip logic) / Question not asked (no skip logic)'), (994, 'SKIP / Skipped based on survey skip logic'), (995, 'Tidak Ada data / No data'), (996, 'Lainnya / Other'), (997, 'Tidak tahu / Do not know'), (998, 'Tidak sesuai / Not applicable'), (999, 'Menolak / Refused')], default=995)),
                ('participateboundaries', models.PositiveSmallIntegerField(choices=[(0, 'Tidak / No'), (1, 'Ya / Yes'), (993, 'Pertanyaan tidak diminta (tidak ada skip logic) / Question not asked (no skip logic)'), (994, 'SKIP / Skipped based on survey skip logic'), (995, 'Tidak Ada data / No data'), (996, 'Lainnya / Other'), (997, 'Tidak tahu / Do not know'), (998, 'Tidak sesuai / Not applicable'), (999, 'Menolak / Refused')], default=995)),
                ('participateadmin', models.PositiveSmallIntegerField(choices=[(0, 'Tidak / No'), (1, 'Ya / Yes'), (993, 'Pertanyaan tidak diminta (tidak ada skip logic) / Question not asked (no skip logic)'), (994, 'SKIP / Skipped based on survey skip logic'), (995, 'Tidak Ada data / No data'), (996, 'Lainnya / Other'), (997, 'Tidak tahu / Do not know'), (998, 'Tidak sesuai / Not applicable'), (999, 'Menolak / Refused')], default=995)),
                ('participaterules', models.PositiveSmallIntegerField(choices=[(0, 'Tidak / No'), (1, 'Ya / Yes'), (993, 'Pertanyaan tidak diminta (tidak ada skip logic) / Question not asked (no skip logic)'), (994, 'SKIP / Skipped based on survey skip logic'), (995, 'Tidak Ada data / No data'), (996, 'Lainnya / Other'), (997, 'Tidak tahu / Do not know'), (998, 'Tidak sesuai / Not applicable'), (999, 'Menolak / Refused')], default=995)),
                ('monitoreco', models.PositiveSmallIntegerField(choices=[(1, 'Kurang dari satu kali per tahun / Less than one time per year'), (2, 'Beberapa kali per tahun / A few times per year'), (3, 'Beberapa kali per bulan / A few times per month'), (4, 'Berberapa kali per minggu / A few times per week'), (5, 'Lebih dari satu kali sehari / More than once per day'), (993, 'Pertanyaan tidak diminta (tidak ada skip logic) / Question not asked (no skip logic)'), (994, 'SKIP / Skipped based on survey skip logic'), (995, 'Tidak Ada data / No data'), (996, 'Lainnya / Other'), (997, 'Tidak tahu / Do not know'), (998, 'Tidak sesuai / Not applicable'), (999, 'Menolak / Refused')], default=995)),
                ('monitorsoc', models.PositiveSmallIntegerField(choices=[(1, 'Kurang dari satu kali per tahun / Less than one time per year'), (2, 'Beberapa kali per tahun / A few times per year'), (3, 'Beberapa kali per bulan / A few times per month'), (4, 'Berberapa kali per minggu / A few times per week'), (5, 'Lebih dari satu kali sehari / More than once per day'), (993, 'Pertanyaan tidak diminta (tidak ada skip logic) / Question not asked (no skip logic)'), (994, 'SKIP / Skipped based on survey skip logic'), (995, 'Tidak Ada data / No data'), (996, 'Lainnya / Other'), (997, 'Tidak tahu / Do not know'), (998, 'Tidak sesuai / Not applicable'), (999, 'Menolak / Refused')], default=995)),
                ('monitorcompliance', models.PositiveSmallIntegerField(choices=[(1, 'Kurang dari satu kali per tahun / Less than one time per year'), (2, 'Beberapa kali per tahun / A few times per year'), (3, 'Beberapa kali per bulan / A few times per month'), (4, 'Berberapa kali per minggu / A few times per week'), (5, 'Lebih dari satu kali sehari / More than once per day'), (993, 'Pertanyaan tidak diminta (tidak ada skip logic) / Question not asked (no skip logic)'), (994, 'SKIP / Skipped based on survey skip logic'), (995, 'Tidak Ada data / No data'), (996, 'Lainnya / Other'), (997, 'Tidak tahu / Do not know'), (998, 'Tidak sesuai / Not applicable'), (999, 'Menolak / Refused')], default=995)),
                ('enforcefreq', models.PositiveSmallIntegerField(choices=[(1, 'Kurang dari satu kali per tahun / Less than one time per year'), (2, 'Beberapa kali per tahun / A few times per year'), (3, 'Beberapa kali per bulan / A few times per month'), (4, 'Berberapa kali per minggu / A few times per week'), (5, 'Lebih dari satu kali sehari / More than once per day'), (993, 'Pertanyaan tidak diminta (tidak ada skip logic) / Question not asked (no skip logic)'), (994, 'SKIP / Skipped based on survey skip logic'), (995, 'Tidak Ada data / No data'), (996, 'Lainnya / Other'), (997, 'Tidak tahu / Do not know'), (998, 'Tidak sesuai / Not applicable'), (999, 'Menolak / Refused')], default=995)),
                ('fgd', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='api.FGD')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='stakeholder_updated_by', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SpeciesRule',
            fields=[
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('updated_on', models.DateTimeField(auto_now=True)),
                ('sppruleid', models.IntegerField(primary_key=True, serialize=False)),
                ('speciescommonl', models.CharField(default='995', max_length=255)),
                ('speciescommon', models.CharField(default='995', max_length=255)),
                ('family', models.CharField(default='995', max_length=255)),
                ('genus', models.CharField(default='995', max_length=255)),
                ('species', models.CharField(default='995', max_length=255)),
                ('spprule', models.PositiveSmallIntegerField(choices=[(0, 'Tidak / No'), (1, 'Ya / Yes'), (993, 'Pertanyaan tidak diminta (tidak ada skip logic) / Question not asked (no skip logic)'), (994, 'SKIP / Skipped based on survey skip logic'), (995, 'Tidak Ada data / No data'), (996, 'Lainnya / Other'), (997, 'Tidak tahu / Do not know'), (998, 'Tidak sesuai / Not applicable'), (999, 'Menolak / Refused')], default=995)),
                ('sppspecificrulel', models.TextField(default='995')),
                ('sppspecificrule', models.TextField(default='995')),
                ('kii', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='api.KII')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='speciesrule_updated_by', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Species',
            fields=[
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('updated_on', models.DateTimeField(auto_now=True)),
                ('speciesid', models.IntegerField(primary_key=True, serialize=False)),
                ('speciescommonl', models.CharField(default='995', max_length=255)),
                ('speciescommon', models.CharField(default='995', max_length=255)),
                ('family', models.CharField(default='995', max_length=255)),
                ('genus', models.CharField(default='995', max_length=255)),
                ('species', models.CharField(default='995', max_length=255)),
                ('fgd', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='api.FGD')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='species_updated_by', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Settlement',
            fields=[
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('updated_on', models.DateTimeField(auto_now=True)),
                ('settlementid', models.IntegerField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('treatment', models.PositiveSmallIntegerField(choices=[(0, 'Control'), (1, 'Treatment'), (993, 'Pertanyaan tidak diminta (tidak ada skip logic) / Question not asked (no skip logic)'), (994, 'SKIP / Skipped based on survey skip logic'), (995, 'Tidak Ada data / No data'), (996, 'Lainnya / Other'), (997, 'Tidak tahu / Do not know'), (998, 'Tidak sesuai / Not applicable'), (999, 'Menolak / Refused')], default=995)),
                ('districtname', models.CharField(max_length=255)),
                ('districtcode', models.BigIntegerField(blank=True, default=995)),
                ('marketname1', models.CharField(default='995', max_length=255)),
                ('marketname2', models.CharField(default='995', max_length=255)),
                ('zone', models.CharField(default='995', max_length=255)),
                ('mpa', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='api.MPA')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='settlement_updated_by', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Seascape',
            fields=[
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('updated_on', models.DateTimeField(auto_now=True)),
                ('code', models.IntegerField(primary_key=True, serialize=False)),
                ('bahasaindonesia', models.CharField(blank=True, max_length=255)),
                ('english', models.CharField(blank=True, max_length=255)),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='seascape_updated_by', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ('code',),
            },
        ),
        migrations.CreateModel(
            name='Rule',
            fields=[
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('updated_on', models.DateTimeField(auto_now=True)),
                ('ruleid', models.IntegerField(primary_key=True, serialize=False)),
                ('rulecode', models.PositiveSmallIntegerField(default=995, validators=[api.models.base.MinValueBCValidator(1), api.models.base.MaxValueBCValidator(999)])),
                ('rulel', models.TextField(default='995')),
                ('rule', models.TextField(default='995')),
                ('fgd', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.FGD')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rule_updated_by', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Right',
            fields=[
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('updated_on', models.DateTimeField(auto_now=True)),
                ('rightsid', models.IntegerField(primary_key=True, serialize=False)),
                ('usernamel', models.CharField(default='995', max_length=255)),
                ('username', models.CharField(default='995', max_length=255)),
                ('userrule', models.PositiveSmallIntegerField(choices=[(0, 'Tidak / No'), (1, 'Ya / Yes'), (993, 'Pertanyaan tidak diminta (tidak ada skip logic) / Question not asked (no skip logic)'), (994, 'SKIP / Skipped based on survey skip logic'), (995, 'Tidak Ada data / No data'), (996, 'Lainnya / Other'), (997, 'Tidak tahu / Do not know'), (998, 'Tidak sesuai / Not applicable'), (999, 'Menolak / Refused')], default=995)),
                ('userspecrulel', models.CharField(default='995', max_length=255)),
                ('userspecrule', models.CharField(default='995', max_length=255)),
                ('govtsupport', models.PositiveSmallIntegerField(choices=[(1, 'Sangat menentang / Strongly oppose'), (2, 'Menentang / Oppose'), (3, 'Tidak menantang maupan mendukung / Neither oppose nor support'), (4, 'Mendukung / Support'), (5, 'Sangat mendukung / Strongly support'), (993, 'Pertanyaan tidak diminta (tidak ada skip logic) / Question not asked (no skip logic)'), (994, 'SKIP / Skipped based on survey skip logic'), (995, 'Tidak Ada data / No data'), (996, 'Lainnya / Other'), (997, 'Tidak tahu / Do not know'), (998, 'Tidak sesuai / Not applicable'), (999, 'Menolak / Refused')], default=995)),
                ('userrulesinc', models.PositiveSmallIntegerField(choices=[(1, 'Tidak dimasukkan / Not included'), (2, 'Dimasukkan sebagian / Partially included'), (3, 'Dimasukkan semua / Fully included'), (993, 'Pertanyaan tidak diminta (tidak ada skip logic) / Question not asked (no skip logic)'), (994, 'SKIP / Skipped based on survey skip logic'), (995, 'Tidak Ada data / No data'), (996, 'Lainnya / Other'), (997, 'Tidak tahu / Do not know'), (998, 'Tidak sesuai / Not applicable'), (999, 'Menolak / Refused')], default=995)),
                ('kii', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='api.KII')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='right_updated_by', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='NonMarineOrganizationMembership',
            fields=[
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('updated_on', models.DateTimeField(auto_now=True)),
                ('nmorganizationid', models.IntegerField(primary_key=True, serialize=False)),
                ('entryhouseholdid', models.BigIntegerField(default=995)),
                ('name', models.CharField(default='995', max_length=255)),
                ('position', models.IntegerField(choices=[(1, 'Anggota / Member'), (2, ' Pengurus / Official'), (993, 'Pertanyaan tidak diminta (tidak ada skip logic) / Question not asked (no skip logic)'), (994, 'SKIP / Skipped based on survey skip logic'), (995, 'Tidak Ada data / No data'), (996, 'Lainnya / Other'), (997, 'Tidak tahu / Do not know'), (998, 'Tidak sesuai / Not applicable'), (999, 'Menolak / Refused')], default=995)),
                ('meeting', models.PositiveSmallIntegerField(choices=[(0, 'Tidak / No'), (1, 'Ya / Yes'), (993, 'Pertanyaan tidak diminta (tidak ada skip logic) / Question not asked (no skip logic)'), (994, 'SKIP / Skipped based on survey skip logic'), (995, 'Tidak Ada data / No data'), (996, 'Lainnya / Other'), (997, 'Tidak tahu / Do not know'), (998, 'Tidak sesuai / Not applicable'), (999, 'Menolak / Refused')], default=995)),
                ('contribution', models.IntegerField(default=995)),
                ('contributionunits', models.CharField(default='995', max_length=255)),
                ('household', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='api.Household')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='nonmarineorganizationmembership_updated_by', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='MPANetwork',
            fields=[
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('updated_on', models.DateTimeField(auto_now=True)),
                ('code', models.IntegerField(primary_key=True, serialize=False)),
                ('bahasaindonesia', models.CharField(blank=True, max_length=255)),
                ('english', models.CharField(blank=True, max_length=255)),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='mpanetwork_updated_by', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ('code',),
            },
        ),
        migrations.AddField(
            model_name='mpa',
            name='mpanetwork',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.MPANetwork'),
        ),
        migrations.AddField(
            model_name='mpa',
            name='seascape',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.Seascape'),
        ),
        migrations.AddField(
            model_name='mpa',
            name='updated_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='mpa_updated_by', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='MonitoringStaff',
            fields=[
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('updated_on', models.DateTimeField(auto_now=True)),
                ('staffid', models.IntegerField(primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, max_length=255)),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='monitoringstaff_updated_by', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='MarineOrganizationMembership',
            fields=[
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('updated_on', models.DateTimeField(auto_now=True)),
                ('morganizationid', models.IntegerField(primary_key=True, serialize=False)),
                ('entryhouseholdid', models.BigIntegerField(default=995)),
                ('name', models.CharField(default='995', max_length=255)),
                ('position', models.IntegerField(choices=[(1, 'Anggota / Member'), (2, ' Pengurus / Official'), (993, 'Pertanyaan tidak diminta (tidak ada skip logic) / Question not asked (no skip logic)'), (994, 'SKIP / Skipped based on survey skip logic'), (995, 'Tidak Ada data / No data'), (996, 'Lainnya / Other'), (997, 'Tidak tahu / Do not know'), (998, 'Tidak sesuai / Not applicable'), (999, 'Menolak / Refused')], default=995)),
                ('meeting', models.PositiveSmallIntegerField(choices=[(0, 'Tidak / No'), (1, 'Ya / Yes'), (993, 'Pertanyaan tidak diminta (tidak ada skip logic) / Question not asked (no skip logic)'), (994, 'SKIP / Skipped based on survey skip logic'), (995, 'Tidak Ada data / No data'), (996, 'Lainnya / Other'), (997, 'Tidak tahu / Do not know'), (998, 'Tidak sesuai / Not applicable'), (999, 'Menolak / Refused')], default=995)),
                ('contribution', models.IntegerField(default=995)),
                ('contributionunits', models.CharField(default='995', max_length=255)),
                ('household', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='api.Household')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='marineorganizationmembership_updated_by', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='LocalThreat',
            fields=[
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('updated_on', models.DateTimeField(auto_now=True)),
                ('localthreatid', models.IntegerField(primary_key=True, serialize=False)),
                ('entryhouseholdid', models.BigIntegerField(default=995)),
                ('localmarinethreat', models.CharField(default='995', max_length=255)),
                ('household', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='api.Household')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='localthreat_updated_by', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='LocalStep',
            fields=[
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('updated_on', models.DateTimeField(auto_now=True)),
                ('localstepsid', models.IntegerField(primary_key=True, serialize=False)),
                ('entryhouseholdid', models.BigIntegerField(default=995)),
                ('localsteps', models.CharField(default='995', max_length=255)),
                ('household', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='api.Household')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='localstep_updated_by', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='LkpLivelihood',
            fields=[
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('updated_on', models.DateTimeField(auto_now=True)),
                ('code', models.IntegerField(primary_key=True, serialize=False)),
                ('bahasaindonesia', models.CharField(blank=True, max_length=255)),
                ('english', models.CharField(blank=True, max_length=255)),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='lkplivelihood_updated_by', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ('code',),
            },
        ),
        migrations.CreateModel(
            name='LkpFreqFishTime',
            fields=[
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('updated_on', models.DateTimeField(auto_now=True)),
                ('code', models.IntegerField(primary_key=True, serialize=False)),
                ('bahasaindonesia', models.CharField(blank=True, max_length=255)),
                ('english', models.CharField(blank=True, max_length=255)),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='lkpfreqfishtime_updated_by', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ('code',),
            },
        ),
        migrations.CreateModel(
            name='LkpFishTechnique',
            fields=[
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('updated_on', models.DateTimeField(auto_now=True)),
                ('code', models.IntegerField(primary_key=True, serialize=False)),
                ('bahasaindonesia', models.CharField(blank=True, max_length=255)),
                ('english', models.CharField(blank=True, max_length=255)),
                ('consolidatedfishtechcategory', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.LkpFishTechCategory')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='lkpfishtechnique_updated_by', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ('code',),
            },
        ),
        migrations.CreateModel(
            name='LkpAssetObtain',
            fields=[
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('updated_on', models.DateTimeField(auto_now=True)),
                ('code', models.IntegerField(primary_key=True, serialize=False)),
                ('bahasaindonesia', models.CharField(blank=True, max_length=255)),
                ('english', models.CharField(blank=True, max_length=255)),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='lkpassetobtain_updated_by', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ('code',),
            },
        ),
        migrations.CreateModel(
            name='LkpAssetAssistance',
            fields=[
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('updated_on', models.DateTimeField(auto_now=True)),
                ('code', models.IntegerField(primary_key=True, serialize=False)),
                ('bahasaindonesia', models.CharField(blank=True, max_length=255)),
                ('english', models.CharField(blank=True, max_length=255)),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='lkpassetassistance_updated_by', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ('code',),
            },
        ),
        migrations.CreateModel(
            name='KIISurveyVersion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('updated_on', models.DateTimeField(auto_now=True)),
                ('version', models.CharField(max_length=255)),
                ('notes', models.TextField(blank=True)),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='kiisurveyversion_updated_by', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ('version',),
            },
        ),
        migrations.AddField(
            model_name='kii',
            name='datacheck',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='kii_staff_data_check', to='api.MonitoringStaff'),
        ),
        migrations.AddField(
            model_name='kii',
            name='dataentryid',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='kii_staff_data_entry', to='api.MonitoringStaff'),
        ),
        migrations.AddField(
            model_name='kii',
            name='fgd',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.FGD'),
        ),
        migrations.AddField(
            model_name='kii',
            name='kiiversion',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='api.KIISurveyVersion'),
        ),
        migrations.AddField(
            model_name='kii',
            name='primaryinterviewer',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='kii_primaryinterviewer', to='api.MonitoringStaff'),
        ),
        migrations.AddField(
            model_name='kii',
            name='secondaryinterviewer',
            field=models.ForeignKey(default=995, on_delete=django.db.models.deletion.PROTECT, related_name='kii_secondaryinterviewer', to='api.MonitoringStaff'),
        ),
        migrations.AddField(
            model_name='kii',
            name='settlement',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='api.Settlement'),
        ),
        migrations.AddField(
            model_name='kii',
            name='updated_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='kii_updated_by', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='HouseholdSurveyVersion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('updated_on', models.DateTimeField(auto_now=True)),
                ('version', models.CharField(max_length=255)),
                ('notes', models.TextField(blank=True)),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='householdsurveyversion_updated_by', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ('version',),
            },
        ),
        migrations.AddField(
            model_name='household',
            name='assetbicycleassistance',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='household_assetbicycleassistance', to='api.LkpAssetAssistance'),
        ),
        migrations.AddField(
            model_name='household',
            name='assetbicycleobtain',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='household_assetbicycleobtains', to='api.LkpAssetObtain'),
        ),
        migrations.AddField(
            model_name='household',
            name='assetboatinboardassistance',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='household_assetboatinboardassistance', to='api.LkpAssetAssistance'),
        ),
        migrations.AddField(
            model_name='household',
            name='assetboatinboardobtain',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='household_assetboatinboardobtains', to='api.LkpAssetObtain'),
        ),
        migrations.AddField(
            model_name='household',
            name='assetboatnomotorassistance',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='household_assetboatnomotorassistance', to='api.LkpAssetAssistance'),
        ),
        migrations.AddField(
            model_name='household',
            name='assetboatnomotorobtain',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='household_assetboatnomotorobtains', to='api.LkpAssetObtain'),
        ),
        migrations.AddField(
            model_name='household',
            name='assetboatoutboardassistance',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='household_assetboatoutboardassistance', to='api.LkpAssetAssistance'),
        ),
        migrations.AddField(
            model_name='household',
            name='assetboatoutboardobtain',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='household_assetboatoutboardobtains', to='api.LkpAssetObtain'),
        ),
        migrations.AddField(
            model_name='household',
            name='assetcarassistance',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='household_assetcarassistance', to='api.LkpAssetAssistance'),
        ),
        migrations.AddField(
            model_name='household',
            name='assetcarobtain',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='household_assetcarobtains', to='api.LkpAssetObtain'),
        ),
        migrations.AddField(
            model_name='household',
            name='assetcdassistance',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='household_assetcdassistance', to='api.LkpAssetAssistance'),
        ),
        migrations.AddField(
            model_name='household',
            name='assetcdobtain',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='household_assetcdobtains', to='api.LkpAssetObtain'),
        ),
        migrations.AddField(
            model_name='household',
            name='assetcellphoneassistance',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='household_assetcellphoneassistance', to='api.LkpAssetAssistance'),
        ),
        migrations.AddField(
            model_name='household',
            name='assetcellphoneobtain',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='household_assetcellphoneobtains', to='api.LkpAssetObtain'),
        ),
        migrations.AddField(
            model_name='household',
            name='assetdvdassistance',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='household_assetdvdassistance', to='api.LkpAssetAssistance'),
        ),
        migrations.AddField(
            model_name='household',
            name='assetdvdobtain',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='household_assetdvdobtains', to='api.LkpAssetObtain'),
        ),
        migrations.AddField(
            model_name='household',
            name='assetgeneratorassistance',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='household_assetgeneratorassistance', to='api.LkpAssetAssistance'),
        ),
        migrations.AddField(
            model_name='household',
            name='assetgeneratorobtain',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='household_assetgeneratorobtains', to='api.LkpAssetObtain'),
        ),
        migrations.AddField(
            model_name='household',
            name='assetlandlinephoneassistance',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='household_assetlandlinephoneassistance', to='api.LkpAssetAssistance'),
        ),
        migrations.AddField(
            model_name='household',
            name='assetlandlinephoneobtain',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='household_assetlandlinephoneobtains', to='api.LkpAssetObtain'),
        ),
        migrations.AddField(
            model_name='household',
            name='assetmotorcycleassistance',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='household_assetmotorcycleassistance', to='api.LkpAssetAssistance'),
        ),
        migrations.AddField(
            model_name='household',
            name='assetmotorcycleobtain',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='household_assetmotorcycleobtains', to='api.LkpAssetObtain'),
        ),
        migrations.AddField(
            model_name='household',
            name='assetradioassistance',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='household_assetradioassistance', to='api.LkpAssetAssistance'),
        ),
        migrations.AddField(
            model_name='household',
            name='assetradioobtain',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='household_assetradioobtains', to='api.LkpAssetObtain'),
        ),
        migrations.AddField(
            model_name='household',
            name='assetsatelliteassistance',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='household_assetsatelliteassistance', to='api.LkpAssetAssistance'),
        ),
        migrations.AddField(
            model_name='household',
            name='assetsatelliteobtain',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='household_assetsatelliteobtains', to='api.LkpAssetObtain'),
        ),
        migrations.AddField(
            model_name='household',
            name='assetstereoassistance',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='household_assetstereoassistance', to='api.LkpAssetAssistance'),
        ),
        migrations.AddField(
            model_name='household',
            name='assetstereoobtain',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='household_assetstereoobtains', to='api.LkpAssetObtain'),
        ),
        migrations.AddField(
            model_name='household',
            name='assettruckassistance',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='household_assettruckassistance', to='api.LkpAssetAssistance'),
        ),
        migrations.AddField(
            model_name='household',
            name='assettruckobtain',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='household_assettruckobtains', to='api.LkpAssetObtain'),
        ),
        migrations.AddField(
            model_name='household',
            name='assettvassistance',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='household_assettvassistance', to='api.LkpAssetAssistance'),
        ),
        migrations.AddField(
            model_name='household',
            name='assettvobtain',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='household_assettvobtains', to='api.LkpAssetObtain'),
        ),
        migrations.AddField(
            model_name='household',
            name='datacheckid',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='household_datacheckstaff', to='api.MonitoringStaff'),
        ),
        migrations.AddField(
            model_name='household',
            name='dataentryid',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='household_dataentrystaff', to='api.MonitoringStaff'),
        ),
        migrations.AddField(
            model_name='household',
            name='fieldcoordinator',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='household_fieldcoordinator', to='api.MonitoringStaff'),
        ),
        migrations.AddField(
            model_name='household',
            name='freqeatfish',
            field=models.ForeignKey(default=995, on_delete=django.db.models.deletion.PROTECT, related_name='freqfishtime_freqeatfish', to='api.LkpFreqFishTime'),
        ),
        migrations.AddField(
            model_name='household',
            name='freqfishtime',
            field=models.ForeignKey(default=995, on_delete=django.db.models.deletion.PROTECT, related_name='freqfishtime_freqfish', to='api.LkpFreqFishTime'),
        ),
        migrations.AddField(
            model_name='household',
            name='freqsalefish',
            field=models.ForeignKey(default=995, on_delete=django.db.models.deletion.PROTECT, related_name='freqfishtime_freqsalefish', to='api.LkpFreqFishTime'),
        ),
        migrations.AddField(
            model_name='household',
            name='majorfishtechnique',
            field=models.ForeignKey(default=995, on_delete=django.db.models.deletion.PROTECT, to='api.LkpFishTechCategory'),
        ),
        migrations.AddField(
            model_name='household',
            name='percentincomefish',
            field=models.ForeignKey(default=995, on_delete=django.db.models.deletion.PROTECT, related_name='nonetoall_percentincomefish', to='api.LkpNoneToAllScale'),
        ),
        migrations.AddField(
            model_name='household',
            name='percentproteinfish',
            field=models.ForeignKey(default=995, on_delete=django.db.models.deletion.PROTECT, related_name='nonetoall_percentproteinfish', to='api.LkpNoneToAllScale'),
        ),
        migrations.AddField(
            model_name='household',
            name='primaryfishtechnique',
            field=models.ForeignKey(default=995, on_delete=django.db.models.deletion.PROTECT, related_name='primaryfishtechnique_households', to='api.LkpFishTechnique'),
        ),
        migrations.AddField(
            model_name='household',
            name='primaryinterviewer',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='household_primaryinterviewer', to='api.MonitoringStaff'),
        ),
        migrations.AddField(
            model_name='household',
            name='primarylivelihood',
            field=models.ForeignKey(default=995, on_delete=django.db.models.deletion.PROTECT, related_name='livelihood_primarylivelihood', to='api.LkpLivelihood'),
        ),
        migrations.AddField(
            model_name='household',
            name='secondaryfishtechnique',
            field=models.ForeignKey(default=995, on_delete=django.db.models.deletion.PROTECT, related_name='secondaryfishtechnique_households', to='api.LkpFishTechnique'),
        ),
        migrations.AddField(
            model_name='household',
            name='secondaryinterviewer',
            field=models.ForeignKey(default=995, on_delete=django.db.models.deletion.PROTECT, related_name='household_secondaryinterviewer', to='api.MonitoringStaff'),
        ),
        migrations.AddField(
            model_name='household',
            name='secondarylivelihood',
            field=models.ForeignKey(default=995, on_delete=django.db.models.deletion.PROTECT, related_name='livelihood_secondarylivelihood', to='api.LkpLivelihood'),
        ),
        migrations.AddField(
            model_name='household',
            name='settlement',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='api.Settlement'),
        ),
        migrations.AddField(
            model_name='household',
            name='surveyversionnumber',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='api.HouseholdSurveyVersion'),
        ),
        migrations.AddField(
            model_name='household',
            name='tertiaryfishtechnique',
            field=models.ForeignKey(default=995, on_delete=django.db.models.deletion.PROTECT, related_name='tertiaryfishtechnique_households', to='api.LkpFishTechnique'),
        ),
        migrations.AddField(
            model_name='household',
            name='tertiarylivelihood',
            field=models.ForeignKey(default=995, on_delete=django.db.models.deletion.PROTECT, related_name='livelihood_tertiarylivelihood', to='api.LkpLivelihood'),
        ),
        migrations.AddField(
            model_name='household',
            name='updated_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='household_updated_by', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='HabitatRule',
            fields=[
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('updated_on', models.DateTimeField(auto_now=True)),
                ('habrulesid', models.IntegerField(primary_key=True, serialize=False)),
                ('habnamel', models.CharField(default='995', max_length=255)),
                ('habname', models.CharField(default='995', max_length=255)),
                ('habrule', models.PositiveSmallIntegerField(choices=[(0, 'Tidak / No'), (1, 'Ya / Yes'), (993, 'Pertanyaan tidak diminta (tidak ada skip logic) / Question not asked (no skip logic)'), (994, 'SKIP / Skipped based on survey skip logic'), (995, 'Tidak Ada data / No data'), (996, 'Lainnya / Other'), (997, 'Tidak tahu / Do not know'), (998, 'Tidak sesuai / Not applicable'), (999, 'Menolak / Refused')], default=995)),
                ('habspecificrulel', models.TextField(default='995')),
                ('habspecificrule', models.TextField(default='995')),
                ('kii', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='api.KII')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='habitatrule_updated_by', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Habitat',
            fields=[
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('updated_on', models.DateTimeField(auto_now=True)),
                ('habitatid', models.IntegerField(primary_key=True, serialize=False)),
                ('habitatcode', models.PositiveSmallIntegerField(default=995, validators=[api.models.base.MinValueBCValidator(1), api.models.base.MaxValueBCValidator(999)])),
                ('habitattypel', models.CharField(default='995', max_length=255)),
                ('habitattype', models.CharField(default='995', max_length=255)),
                ('fgd', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='api.FGD')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='habitat_updated_by', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='GlobalThreat',
            fields=[
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('updated_on', models.DateTimeField(auto_now=True)),
                ('globalthreatid', models.IntegerField(primary_key=True, serialize=False)),
                ('entryhouseholdid', models.BigIntegerField(default=995)),
                ('globalmarinethreat', models.CharField(default='995', max_length=255)),
                ('household', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='api.Household')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='globalthreat_updated_by', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='GlobalStep',
            fields=[
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('updated_on', models.DateTimeField(auto_now=True)),
                ('globalstepsid', models.IntegerField(primary_key=True, serialize=False)),
                ('entryhouseholdid', models.BigIntegerField(default=995)),
                ('globalmarinesteps', models.CharField(default='995', max_length=255)),
                ('household', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='api.Household')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='globalstep_updated_by', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='FGDSurveyVersion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('updated_on', models.DateTimeField(auto_now=True)),
                ('version', models.CharField(max_length=255)),
                ('notes', models.TextField(blank=True)),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='fgdsurveyversion_updated_by', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ('version',),
            },
        ),
        migrations.AddField(
            model_name='fgd',
            name='datacheckid',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='fgd_staff_data_check', to='api.MonitoringStaff'),
        ),
        migrations.AddField(
            model_name='fgd',
            name='dataentryid',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='fgd_staff_data_entry', to='api.MonitoringStaff'),
        ),
        migrations.AddField(
            model_name='fgd',
            name='facilitator',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='fgd_staff_facilitator', to='api.MonitoringStaff'),
        ),
        migrations.AddField(
            model_name='fgd',
            name='fgdversion',
            field=models.ForeignKey(default=995, on_delete=django.db.models.deletion.PROTECT, to='api.FGDSurveyVersion'),
        ),
        migrations.AddField(
            model_name='fgd',
            name='notetaker',
            field=models.ForeignKey(default=995, on_delete=django.db.models.deletion.PROTECT, related_name='fgd_staff_notetaker', to='api.MonitoringStaff'),
        ),
        migrations.AddField(
            model_name='fgd',
            name='settlement',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='api.Settlement'),
        ),
        migrations.AddField(
            model_name='fgd',
            name='updated_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='fgd_updated_by', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='Demographic',
            fields=[
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('updated_on', models.DateTimeField(auto_now=True)),
                ('demographicid', models.IntegerField(primary_key=True, serialize=False)),
                ('entryhouseholdid', models.BigIntegerField(default=995)),
                ('demographiccode', models.PositiveSmallIntegerField(default=995, validators=[api.models.base.MinValueBCValidator(1), api.models.base.MaxValueBCValidator(999)])),
                ('relationhhh', models.IntegerField(choices=[(0, 'Kepala keluarga'), (1, 'Pasangan (suami/istri) / Spouse'), (2, 'Anak / Child'), (3, 'Ibu/Ayah mertua / Father/Mother in law'), (4, 'Cucu / Grandchild'), (5, 'Orang tua / Parent'), (6, 'Anak mantu or Anak menantu  / Child in law'), (7, 'Saudara laki-laki/perempuan / Sibling'), (8, 'Ipar / Sibling in law'), (9, 'Paman/Bibi (Om/Tante) / Uncle or Aunt'), (10, 'Keponakan / Nephew or Neice'), (11, 'Anak tiri or Anak angkat / Foster child'), (12, 'Keluarga lainnya / Other family member'), (13, 'Tidak ada hubungan kekerabatan / Not related to family'), (993, 'Pertanyaan tidak diminta (tidak ada skip logic) / Question not asked (no skip logic)'), (994, 'SKIP / Skipped based on survey skip logic'), (995, 'Tidak Ada data / No data'), (996, 'Lainnya / Other'), (997, 'Tidak tahu / Do not know'), (998, 'Tidak sesuai / Not applicable'), (999, 'Menolak / Refused')], default=995)),
                ('individualage', models.DecimalField(decimal_places=2, default=995, max_digits=5, validators=[api.models.base.MinValueBCValidator(0), api.models.base.MaxValueBCValidator(150)])),
                ('individualgender', models.IntegerField(choices=[(1, 'Laki-Laki / Male'), (2, ' Perempuan / Female'), (993, 'Pertanyaan tidak diminta (tidak ada skip logic) / Question not asked (no skip logic)'), (994, 'SKIP / Skipped based on survey skip logic'), (995, 'Tidak Ada data / No data'), (996, 'Lainnya / Other'), (997, 'Tidak tahu / Do not know'), (998, 'Tidak sesuai / Not applicable'), (999, 'Menolak / Refused')], default=995)),
                ('individualeducation', models.CharField(default='995', max_length=255)),
                ('individualedlevel', models.IntegerField(choices=[(0, 'Tidak Ada Pendidikan Formal / No Formal Education'), (1, 'Taman Kanak-kanak / Pre-School'), (2, 'Sekolah Dasar (SD) / Primary School'), (3, 'Sekolah Menengah Pertama (SMP) / Middle  School '), (4, 'Sekolah Menengah Atas (SMA) dan Sekolah Menengah Kejuruan (SMK)/ Secondary School'), (5, ' Ahli Madya Diploma 3 dan lebih tinggi  (S1, S2, S3) / Post Secondary School'), (993, 'Pertanyaan tidak diminta (tidak ada skip logic) / Question not asked (no skip logic)'), (994, 'SKIP / Skipped based on survey skip logic'), (995, 'Tidak Ada data / No data'), (996, 'Lainnya / Other'), (997, 'Tidak tahu / Do not know'), (998, 'Tidak sesuai / Not applicable'), (999, 'Menolak / Refused')], default=995)),
                ('individualenrolled', models.PositiveSmallIntegerField(choices=[(0, 'Tidak / No'), (1, 'Ya / Yes'), (993, 'Pertanyaan tidak diminta (tidak ada skip logic) / Question not asked (no skip logic)'), (994, 'SKIP / Skipped based on survey skip logic'), (995, 'Tidak Ada data / No data'), (996, 'Lainnya / Other'), (997, 'Tidak tahu / Do not know'), (998, 'Tidak sesuai / Not applicable'), (999, 'Menolak / Refused')], default=995)),
                ('householdhead', models.PositiveSmallIntegerField(choices=[(0, 'Tidak / No'), (1, 'Ya / Yes'), (993, 'Pertanyaan tidak diminta (tidak ada skip logic) / Question not asked (no skip logic)'), (994, 'SKIP / Skipped based on survey skip logic'), (995, 'Tidak Ada data / No data'), (996, 'Lainnya / Other'), (997, 'Tidak tahu / Do not know'), (998, 'Tidak sesuai / Not applicable'), (999, 'Menolak / Refused')], default=995)),
                ('individualunwell', models.PositiveSmallIntegerField(choices=[(0, 'Tidak / No'), (1, 'Ya / Yes'), (993, 'Pertanyaan tidak diminta (tidak ada skip logic) / Question not asked (no skip logic)'), (994, 'SKIP / Skipped based on survey skip logic'), (995, 'Tidak Ada data / No data'), (996, 'Lainnya / Other'), (997, 'Tidak tahu / Do not know'), (998, 'Tidak sesuai / Not applicable'), (999, 'Menolak / Refused')], default=995)),
                ('individualdaysunwell', models.PositiveIntegerField(default=995, validators=[api.models.base.MaxValueBCValidator(31)])),
                ('individuallostdays', models.PositiveIntegerField(default=995, validators=[api.models.base.MaxValueBCValidator(31)])),
                ('household', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='api.Household')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='demographic_updated_by', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Death',
            fields=[
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('updated_on', models.DateTimeField(auto_now=True)),
                ('deathid', models.IntegerField(primary_key=True, serialize=False)),
                ('entryhouseholdid', models.BigIntegerField(default=995)),
                ('gender', models.IntegerField(choices=[(1, 'Laki-Laki / Male'), (2, ' Perempuan / Female'), (993, 'Pertanyaan tidak diminta (tidak ada skip logic) / Question not asked (no skip logic)'), (994, 'SKIP / Skipped based on survey skip logic'), (995, 'Tidak Ada data / No data'), (996, 'Lainnya / Other'), (997, 'Tidak tahu / Do not know'), (998, 'Tidak sesuai / Not applicable'), (999, 'Menolak / Refused')], default=995)),
                ('ageatdeath', models.DecimalField(decimal_places=2, default=995, max_digits=5, validators=[api.models.base.MinValueBCValidator(0), api.models.base.MaxValueBCValidator(150)])),
                ('datedeath', models.DateField(blank=True, null=True)),
                ('household', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='api.Household')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='death_updated_by', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Birth',
            fields=[
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('updated_on', models.DateTimeField(auto_now=True)),
                ('birthid', models.IntegerField(primary_key=True, serialize=False)),
                ('entryhouseholdid', models.BigIntegerField(default=995)),
                ('infantsurvived', models.PositiveSmallIntegerField(choices=[(0, 'Tidak / No'), (1, 'Ya / Yes'), (993, 'Pertanyaan tidak diminta (tidak ada skip logic) / Question not asked (no skip logic)'), (994, 'SKIP / Skipped based on survey skip logic'), (995, 'Tidak Ada data / No data'), (996, 'Lainnya / Other'), (997, 'Tidak tahu / Do not know'), (998, 'Tidak sesuai / Not applicable'), (999, 'Menolak / Refused')], default=995)),
                ('dateofdeath', models.DateField(blank=True, null=True)),
                ('household', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='api.Household')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='birth_updated_by', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
    ]
